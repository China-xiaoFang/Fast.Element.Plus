{"version":3,"file":"tree.js","sources":["../../../../../packages/components/tree/src/tree.tsx"],"sourcesContent":["import { computed, defineComponent, nextTick, onMounted, reactive, ref, watch } from \"vue\";\nimport { ElIcon, ElInput, ElScrollbar, ElTree, useGlobalSize } from \"element-plus\";\nimport { Expand, Fold } from \"@element-plus/icons-vue\";\nimport { addUnit, consoleError, definePropType, makeSlots, useExpose, useProps, useRender, withDefineType } from \"@fast-china/utils\";\nimport { useVModel } from \"@vueuse/core\";\nimport { isArray, isBoolean, isNull, isNumber, isObject, isString } from \"lodash-unified\";\nimport { treeProps } from \"./tree.props\";\nimport type { FilterValue, NodeDropType, TreeKey, TreeNodeData } from \"./tree.props\";\nimport type { ElTreeOutput } from \"./tree.type\";\nimport type { ComponentInternalInstance, VNode } from \"vue\";\n\nexport const faTreeProps = {\n\t...treeProps,\n\t/** 每个树节点用来作为唯一标识的属性，整棵树应该是唯一的 */\n\tnodeKey: {\n\t\ttype: String,\n\t\tdefault: \"value\",\n\t},\n\t/** @description 是否默认展开所有节点 */\n\tdefaultExpandAll: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n\t/** @description 是否在点击节点的时候选中节点 */\n\tcheckOnClickNode: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n\t/** @description 是否高亮当前选中节点 */\n\thighlightCurrent: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n\t/** @description 点击折叠节点，需要开启 'expandOnClickNode' */\n\tcollapseOnClickNode: Boolean,\n\t/** @description v-model绑定值 */\n\tmodelValue: {\n\t\ttype: definePropType<string | number | boolean | object>([String, Number, Boolean, Object]),\n\t\tdefault: undefined,\n\t},\n\t/** @description v-model:label绑定值 */\n\tlabel: String,\n\t/** @description 宽度 */\n\twidth: {\n\t\ttype: [String, Number],\n\t\tdefault: 180,\n\t},\n\t/** @description 默认选择 */\n\tdefaultSelection: [String, Number],\n\t/** @description 标题 */\n\ttitle: String,\n\t/** @description 折叠 */\n\thamburger: Boolean,\n\t/** @description 隐藏全部 */\n\thideAll: Boolean,\n\t/** @description 隐藏过滤 */\n\thideFilter: Boolean,\n\t/** @description 全部值 */\n\tallValue: {\n\t\ttype: definePropType<string | number | boolean | object>([String, Number, Boolean, Object]),\n\t\tdefault: undefined,\n\t},\n\t/** @description 树形数据 */\n\tdata: {\n\t\ttype: definePropType<ElTreeOutput[]>(Array),\n\t\tdefault: (): ElTreeOutput[] => [],\n\t},\n\t/** @description 请求api */\n\trequestApi: {\n\t\ttype: definePropType<(params?: any) => Promise<ElTreeOutput[]>>(Function),\n\t},\n\t/** 初始化参数 */\n\tinitParam: definePropType<string | number | any>([String, Number, Object]),\n};\n\nexport const faTreeEmits = {\n\t/** @description v-model 回调 */\n\t\"update:modelValue\": (value: string | number | boolean | object): boolean =>\n\t\tisString(value) || isNumber(value) || isBoolean(value) || isObject(value) || isNull(value),\n\t/** @description v-model:label 回调 */\n\t\"update:label\": (value: string): boolean => isString(value) || isNull(value),\n\t/** @description 数据改变 */\n\tdataChangeCallBack: (data: ElTreeOutput[], orgData: ElTreeOutput[]): boolean => isArray(data) && isArray(orgData),\n\t/** @description 改变 */\n\tchange: (data: ElTreeOutput, node: any, instance: ComponentInternalInstance, event: MouseEvent): boolean =>\n\t\tisObject(data) && isObject(node) && isObject(instance) && event instanceof MouseEvent,\n\t/** @description 当节点被点击的时候触发 */\n\tnodeClick: (data: ElTreeOutput, node?: any, instance?: ComponentInternalInstance, event?: MouseEvent): boolean =>\n\t\tisObject(data) && isObject(node) && isObject(instance) && event instanceof MouseEvent,\n\t/** @description 当某一节点被鼠标右键点击时会触发该事件 */\n\tnodeContextmenu: (event: Event, data: ElTreeOutput, node?: any, instance?: ComponentInternalInstance): boolean =>\n\t\tevent instanceof Event && isObject(data) && isObject(node) && isObject(instance),\n\t/** @description 当复选框被点击的时候触发 */\n\tcheckChange: (data: ElTreeOutput, checked: boolean, indeterminate: boolean): boolean =>\n\t\tisObject(data) && isBoolean(checked) && isBoolean(indeterminate),\n\t/** @description 点击节点复选框之后触发 */\n\tcheck: (\n\t\tdata: ElTreeOutput,\n\t\tnode: {\n\t\t\tcheckedNodes: ElTreeOutput[];\n\t\t\tcheckedKeys: TreeKey[];\n\t\t\thalfCheckedNodes: ElTreeOutput[];\n\t\t\thalfCheckedKeys: TreeKey[];\n\t\t}\n\t): boolean => isObject(data) && isObject(node),\n\t/** @description 当前选中节点变化时触发的事件 */\n\tcurrentChange: (data: ElTreeOutput, node: any): boolean => isObject(data) && isObject(node),\n\t/** @description 节点被展开时触发的事件 */\n\tnodeExpand: (data: ElTreeOutput, node: any, instance: ComponentInternalInstance): boolean =>\n\t\tisObject(data) && isObject(node) && isObject(instance),\n\t/** @description 节点被关闭时触发的事件 */\n\tnodeCollapse: (data: ElTreeOutput, node: any, instance: ComponentInternalInstance): boolean =>\n\t\tisObject(data) && isObject(node) && isObject(instance),\n\t/** @description 节点开始拖拽时触发的事件 */\n\tnodeDragStart: (node: any, event: DragEvent): boolean => isObject(node) && event instanceof DragEvent,\n\t/** @description 拖拽进入其他节点时触发的事件 */\n\tnodeDragEnter: (node: any, enterNode: any, event: DragEvent): boolean => isObject(node) && isObject(enterNode) && event instanceof DragEvent,\n\t/** @description 拖拽离开某个节点时触发的事件 */\n\tnodeDragLeave: (node: any, leaveNode: any, event: DragEvent): boolean => isObject(node) && isObject(leaveNode) && event instanceof DragEvent,\n\t/** @description 在拖拽节点时触发的事件（类似浏览器的 mouseover 事件） */\n\tnodeDragOver: (node: any, dropNode: any, event: DragEvent): boolean => isObject(node) && isObject(dropNode) && event instanceof DragEvent,\n\t/** @description 拖拽结束时（可能未成功）触发的事件 */\n\tnodeDragEnd: (node: any, dropNode: any, dropType: NodeDropType, event: DragEvent): boolean =>\n\t\tisObject(node) && isObject(dropNode) && isString(dropType) && event instanceof DragEvent,\n\t/** @description 拖拽成功完成时触发的事件 */\n\tnodeDrop: (node: any, dropNode: any, dropType: NodeDropType, event: DragEvent): boolean =>\n\t\tisObject(node) && isObject(dropNode) && isString(dropType) && event instanceof DragEvent,\n};\n\ntype FaTreeSlots = {\n\t/** @description 默认内容插槽 */\n\tdefault: { node: any; data: ElTreeOutput };\n\t/** @description 当数据为空时自定义的内容 */\n\tempty: never;\n\t/** @description 显示内容插槽 */\n\tlabel: { node: any; data: ElTreeOutput };\n};\n\nexport default defineComponent({\n\tname: \"FaTree\",\n\tprops: faTreeProps,\n\temits: faTreeEmits,\n\tslots: makeSlots<FaTreeSlots>(),\n\tsetup(props, { attrs, slots, emit, expose }) {\n\t\tconst selectedLabel = useVModel(props, \"label\", emit, { passive: true });\n\t\tconst _globalSize = useGlobalSize();\n\n\t\tconst state = reactive({\n\t\t\tvalue: withDefineType<string | number | boolean | object>(),\n\t\t\tloading: false,\n\t\t\tsearchValue: withDefineType<string>(),\n\t\t\torgTreeData: withDefineType<ElTreeOutput[]>([]),\n\t\t\ttreeData: withDefineType<ElTreeOutput[]>([]),\n\t\t\thamburger: false,\n\t\t\twidth: computed(() => {\n\t\t\t\tif (props.hamburger || state.hamburger) {\n\t\t\t\t\treturn \"130px\";\n\t\t\t\t} else {\n\t\t\t\t\tconst width = addUnit(props.width);\n\t\t\t\t\tif (_globalSize.value === \"small\") {\n\t\t\t\t\t\treturn `calc(${width} * 0.9)`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t});\n\n\t\t/** @description 只有一层节点 */\n\t\tconst fold = computed<boolean>(() => [...state.orgTreeData].filter((f) => f[props.props.children]?.length > 0).length === 0);\n\n\t\tconst treeRef = ref<InstanceType<typeof ElTree>>();\n\n\t\tconst setTreeData = (treeData: ElTreeOutput[] | any[]): void => {\n\t\t\tif (!props.hideAll) {\n\t\t\t\ttreeData.unshift({ [props.nodeKey]: props.allValue, label: \"全部\", all: true } as any);\n\t\t\t}\n\t\t\tstate.treeData = treeData;\n\t\t};\n\n\t\tconst loadData = async (): Promise<void> => {\n\t\t\tlet curSelectedData;\n\t\t\tif (props.nodeKey) {\n\t\t\t\t// 记录原本选中的值\n\t\t\t\tcurSelectedData = treeRef.value.getCurrentKey();\n\t\t\t}\n\t\t\t// 判断是否需要自动请求\n\t\t\tif (props.requestApi) {\n\t\t\t\tstate.loading = true;\n\t\t\t\tconst params = { ...(props.initParam ?? {}), searchValue: state.searchValue };\n\t\t\t\ttry {\n\t\t\t\t\tconst resData = await props.requestApi(params);\n\t\t\t\t\tstate.orgTreeData = resData;\n\t\t\t\t\tsetTreeData(resData);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsoleError(\"FaTree\", error);\n\t\t\t\t\tstate.orgTreeData = [];\n\t\t\t\t\tsetTreeData([]);\n\t\t\t\t\temit(\"dataChangeCallBack\", state.treeData, state.orgTreeData);\n\t\t\t\t} finally {\n\t\t\t\t\tstate.loading = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstate.orgTreeData = props.data;\n\t\t\t\tsetTreeData(props.data);\n\t\t\t}\n\t\t\tif (props.nodeKey && curSelectedData) {\n\t\t\t\tnextTick(() => {\n\t\t\t\t\t// 设置原本选中的值\n\t\t\t\t\ttreeRef.value.setCurrentKey(curSelectedData);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (props.defaultSelection) {\n\t\t\t\t\tnextTick(() => {\n\t\t\t\t\t\ttreeRef.value.setCurrentKey(props.defaultSelection);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst handleHamburgerClick = (): void => {\n\t\t\tif (props.hamburger || state.hamburger) {\n\t\t\t\tsetTreeData(state.orgTreeData);\n\t\t\t} else {\n\t\t\t\t// 折叠只显示一级数据\n\t\t\t\tstate.treeData = state.orgTreeData.map((m) => ({ ...m, [props.props.children]: [] }));\n\t\t\t}\n\t\t\tstate.hamburger = !state.hamburger;\n\t\t};\n\n\t\tconst handleFilterNode = (value: FilterValue, data: TreeNodeData, child: any): boolean => {\n\t\t\tif (!value) return true;\n\t\t\tlet parentNode = child.parent,\n\t\t\t\tlabels = data.all ? [data.label] : [child.label],\n\t\t\t\tlevel = 1;\n\t\t\twhile (level < child.level) {\n\t\t\t\tlabels = [...labels, parentNode.label];\n\t\t\t\tparentNode = parentNode.parent;\n\t\t\t\tlevel++;\n\t\t\t}\n\t\t\tconst result = labels.some((label) => label.indexOf(value) !== -1);\n\t\t\tif (props.filterNodeMethod) {\n\t\t\t\treturn result && props.filterNodeMethod(value, data, child);\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tconst handleNodeClick = (data: ElTreeOutput, node: any, instance: ComponentInternalInstance, event: MouseEvent): void => {\n\t\t\t// 判断是否开启点击展开节点，并且节点是折叠状态，则自动展开，否则需要点击箭头图标才能折叠或开启 'collapseOnClickNode'\n\t\t\tif (props.expandOnClickNode) {\n\t\t\t\tif (!node.expanded) {\n\t\t\t\t\tnode.expand();\n\t\t\t\t} else if (node.expanded && props.collapseOnClickNode) {\n\t\t\t\t\tnode.collapse();\n\t\t\t\t}\n\t\t\t}\n\t\t\tstate.value = node.key;\n\t\t\tselectedLabel.value = node.label;\n\t\t\temit(\"update:modelValue\", state.value);\n\t\t\temit(\"change\", data, node, instance, event);\n\t\t\temit(\"nodeClick\", data, node, instance, event);\n\t\t};\n\n\t\tonMounted(async () => {\n\t\t\tawait loadData();\n\t\t\twatch(\n\t\t\t\t() => props.data,\n\t\t\t\tasync () => {\n\t\t\t\t\tif (!props.requestApi) {\n\t\t\t\t\t\tawait loadData();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ deep: true }\n\t\t\t);\n\t\t});\n\n\t\tconst elTreeProps = useProps(props, treeProps, [\"data\", \"expandOnClickNode\", \"filterNodeMethod\"]);\n\n\t\tuseRender(() => (\n\t\t\t<div\n\t\t\t\tclass={[\"el-card fa-tree\", `fa-tree-${_globalSize.value}`, { \"fa-tree__fold\": (props.hamburger && state.hamburger) || fold.value }]}\n\t\t\t\tstyle={{ width: state.width }}\n\t\t\t\tvLoading={state.loading}\n\t\t\t>\n\t\t\t\t{(props.title || props.hamburger) && (\n\t\t\t\t\t<div class=\"fa-tree__title\">\n\t\t\t\t\t\t{props.title && <h4>{props.title}</h4>}\n\t\t\t\t\t\t{props.hamburger &&\n\t\t\t\t\t\t\t(state.hamburger ? (\n\t\t\t\t\t\t\t\t<ElIcon onClick={handleHamburgerClick} title=\"展开\">\n\t\t\t\t\t\t\t\t\t<Expand />\n\t\t\t\t\t\t\t\t</ElIcon>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<ElIcon onClick={handleHamburgerClick} title=\"折叠\">\n\t\t\t\t\t\t\t\t\t<Fold />\n\t\t\t\t\t\t\t\t</ElIcon>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{!props.hideFilter && (\n\t\t\t\t\t<ElInput\n\t\t\t\t\t\tclass=\"fa-tree__search-input\"\n\t\t\t\t\t\tvModel_trim={state.searchValue}\n\t\t\t\t\t\tplaceholder={props.hamburger || state.hamburger ? \"关键字过滤\" : \"输入关键字进行过滤\"}\n\t\t\t\t\t\tclearable\n\t\t\t\t\t\tonInput={(value) => treeRef.value.filter(value)}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<ElScrollbar class=\"fa-tree__scrollbar\">\n\t\t\t\t\t<ElTree\n\t\t\t\t\t\t{...elTreeProps.value}\n\t\t\t\t\t\tref={treeRef}\n\t\t\t\t\t\tdata={state.treeData}\n\t\t\t\t\t\texpandOnClickNode={props.checkOnClickNode ? false : props.expandOnClickNode}\n\t\t\t\t\t\tfilterNodeMethod={handleFilterNode}\n\t\t\t\t\t\tonNodeClick={handleNodeClick}\n\t\t\t\t\t\tonNodeContextmenu={(event: Event, data: ElTreeOutput, node?: any, instance?: ComponentInternalInstance) =>\n\t\t\t\t\t\t\temit(\"nodeContextmenu\", event, data, node, instance)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonCheckChange={(data: ElTreeOutput, checked: boolean, indeterminate: boolean) =>\n\t\t\t\t\t\t\temit(\"checkChange\", data, checked, indeterminate)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonCheck={(\n\t\t\t\t\t\t\tdata: ElTreeOutput,\n\t\t\t\t\t\t\tnode: {\n\t\t\t\t\t\t\t\tcheckedNodes: ElTreeOutput[];\n\t\t\t\t\t\t\t\tcheckedKeys: TreeKey[];\n\t\t\t\t\t\t\t\thalfCheckedNodes: ElTreeOutput[];\n\t\t\t\t\t\t\t\thalfCheckedKeys: TreeKey[];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) => emit(\"check\", data, node)}\n\t\t\t\t\t\tonCurrentChange={(data: ElTreeOutput, node: any) => emit(\"currentChange\", data, node)}\n\t\t\t\t\t\tonNodeExpand={(data: ElTreeOutput, node: any, instance: ComponentInternalInstance) =>\n\t\t\t\t\t\t\temit(\"nodeExpand\", data, node, instance)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonNodeCollapse={(data: ElTreeOutput, node: any, instance: ComponentInternalInstance) =>\n\t\t\t\t\t\t\temit(\"nodeCollapse\", data, node, instance)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonNodeDragStart={(node: any, event: DragEvent) => emit(\"nodeDragStart\", node, event)}\n\t\t\t\t\t\tonNodeDragEnter={(node: any, enterNode: any, event: DragEvent) => emit(\"nodeDragEnter\", node, enterNode, event)}\n\t\t\t\t\t\tonNodeDragLeave={(node: any, leaveNode: any, event: DragEvent) => emit(\"nodeDragLeave\", node, leaveNode, event)}\n\t\t\t\t\t\tonNodeDragOver={(node: any, dropNode: any, event: DragEvent) => emit(\"nodeDragOver\", node, dropNode, event)}\n\t\t\t\t\t\tonNodeDragEnd={(node: any, dropNode: any, dropType: NodeDropType, event: DragEvent) =>\n\t\t\t\t\t\t\temit(\"nodeDragEnd\", node, dropNode, dropType, event)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonNodeDrop={(node: any, dropNode: any, dropType: NodeDropType, event: DragEvent) =>\n\t\t\t\t\t\t\temit(\"nodeDrop\", node, dropNode, dropType, event)\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\tdefault: ({ node, data }: { node: any; data: ElTreeOutput }) => (\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclass=\"el-tree-node__label\"\n\t\t\t\t\t\t\t\t\ttitle={data?.all ? data.label : node.label}\n\t\t\t\t\t\t\t\t\tstyle={{ paddingLeft: fold.value ? \"3px\" : \"\" }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<span>{slots.label ? slots.label({ node, data }) : data?.all ? data.label : node.label}</span>\n\t\t\t\t\t\t\t\t\t{node.key && data.showNum ? <span>[{data.quantity}]</span> : null}\n\t\t\t\t\t\t\t\t\t{slots.default && <span>{slots.default({ node, data })}</span>}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t...(slots.empty && { empty: (): VNode[] => slots.empty() }),\n\t\t\t\t\t\t}}\n\t\t\t\t\t</ElTree>\n\t\t\t\t</ElScrollbar>\n\t\t\t</div>\n\t\t));\n\n\t\treturn useExpose(expose, {\n\t\t\t/** @description 过滤所有树节点，过滤后的节点将被隐藏 */\n\t\t\tfilter: computed(() => treeRef.value?.filter),\n\t\t\t/** @description 为节点设置新数据，只有当设置 node-key 属性的时候才可用 */\n\t\t\tupdateKeyChildren: computed(() => treeRef.value?.updateKeyChildren),\n\t\t\t/** @description 如果节点可以被选中，(show-checkbox 为 true), 本方法将返回当前选中节点的数组 */\n\t\t\tgetCheckedNodes: computed(() => treeRef.value?.getCheckedNodes),\n\t\t\t/** @description 设置目前勾选的节点，使用此方法必须提前设置 node-key 属性 */\n\t\t\tsetCheckedNodes: computed(() => treeRef.value?.setCheckedNodes),\n\t\t\t/** @description \t若节点可用被选中 (show-checkbox 为 true), 它将返回当前选中节点 key 的数组 */\n\t\t\tgetCheckedKeys: computed(() => treeRef.value?.getCheckedKeys),\n\t\t\t/** @description 设置目前选中的节点，使用此方法必须设置 node-key 属性 */\n\t\t\tsetCheckedKeys: computed(() => treeRef.value?.setCheckedKeys),\n\t\t\t/** @description 设置节点是否被选中, 使用此方法必须设置 node-key 属性 */\n\t\t\tsetChecked: computed(() => treeRef.value?.setChecked),\n\t\t\t/** @description 如果节点可用被选中 (show-checkbox 为 true), 它将返回当前半选中的节点组成的数组 */\n\t\t\tgetHalfCheckedNodes: computed(() => treeRef.value?.getHalfCheckedNodes),\n\t\t\t/** @description 若节点可被选中(show-checkbox 为 true)，则返回目前半选中的节点的 key 所组成的数组 */\n\t\t\tgetHalfCheckedKeys: computed(() => treeRef.value?.getHalfCheckedKeys),\n\t\t\t/** @description 返回当前被选中节点的数据 (如果没有则返回 null) */\n\t\t\tgetCurrentKey: computed(() => treeRef.value?.getCurrentKey),\n\t\t\t/** @description 返回当前被选中节点的数据 (如果没有则返回 null) */\n\t\t\tgetCurrentNode: computed(() => treeRef.value?.getCurrentNode),\n\t\t\t/** @description 通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key  属性 */\n\t\t\tsetCurrentKey: computed(() => treeRef.value?.setCurrentKey),\n\t\t\t/** @description 设置节点为选中状态，使用此方法必须设置 node-key 属性 */\n\t\t\tsetCurrentNode: computed(() => treeRef.value?.setCurrentNode),\n\t\t\t/** @description 根据 data 或者 key 拿到 Tree 组件中的 node */\n\t\t\tgetNode: computed(() => treeRef.value?.getNode),\n\t\t\t/** @description 删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性 */\n\t\t\tremove: computed(() => treeRef.value?.remove),\n\t\t\t/** @description 为 Tree 中的一个节点追加一个子节点 */\n\t\t\tappend: computed(() => treeRef.value?.append),\n\t\t\t/** @description 在 Tree 中给定节点前插入一个节点 */\n\t\t\tinsertBefore: computed(() => treeRef.value?.insertBefore),\n\t\t\t/** @description 在 Tree 中给定节点后插入一个节点 */\n\t\t\tinsertAfter: computed(() => treeRef.value?.insertAfter),\n\t\t\t/** @description 加载状态 */\n\t\t\tloading: computed(() => state.loading),\n\t\t\t/** @description 刷新 */\n\t\t\trefresh: loadData,\n\t\t});\n\t},\n});\n"],"names":["faTreeProps","treeProps","nodeKey","type","String","default","defaultExpandAll","Boolean","checkOnClickNode","highlightCurrent","collapseOnClickNode","modelValue","definePropType","Number","Object","undefined","label","width","defaultSelection","title","hamburger","hideAll","hideFilter","allValue","data","Array","requestApi","Function","initParam","faTreeEmits","isString","value","isNumber","isBoolean","isObject","isNull","dataChangeCallBack","orgData","isArray","change","node","instance","event","MouseEvent","nodeClick","nodeContextmenu","Event","checkChange","checked","indeterminate","check","currentChange","nodeExpand","nodeCollapse","nodeDragStart","DragEvent","nodeDragEnter","enterNode","nodeDragLeave","leaveNode","nodeDragOver","dropNode","nodeDragEnd","dropType","nodeDrop","Tree","name","props","emits","slots","makeSlots","setup","attrs","emit","expose","selectedLabel","useVModel","passive","_globalSize","useGlobalSize","state","reactive","withDefineType","loading","searchValue","orgTreeData","treeData","computed","addUnit","fold","filter","f","children","length","treeRef","ref","setTreeData","unshift","all","loadData","async","curSelectedData","getCurrentKey","params","resData","error","consoleError","nextTick","setCurrentKey","handleHamburgerClick","map","m","handleFilterNode","child","parentNode","parent","labels","level","result","some","indexOf","filterNodeMethod","handleNodeClick","expandOnClickNode","expanded","collapse","expand","key","onMounted","watch","deep","elTreeProps","useProps","useRender","_withDirectives","_createVNode","class","style","ElIcon","onClick","Expand","Fold","ElInput","modelModifiers","trim","$event","placeholder","clearable","onInput","ElScrollbar","ElTree","_mergeProps","onNodeClick","onNodeContextmenu","onCheckChange","onCheck","onCurrentChange","onNodeExpand","onNodeCollapse","onNodeDragStart","onNodeDragEnter","onNodeDragLeave","onNodeDragOver","onNodeDragEnd","onNodeDrop","paddingLeft","showNum","_createTextVNode","quantity","empty","_resolveDirective","useExpose","updateKeyChildren","getCheckedNodes","setCheckedNodes","getCheckedKeys","setCheckedKeys","setChecked","getHalfCheckedNodes","getHalfCheckedKeys","getCurrentNode","setCurrentNode","getNode","remove","append","insertBefore","insertAfter","refresh"],"mappings":"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"}