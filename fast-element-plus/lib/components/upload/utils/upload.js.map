{"version":3,"file":"upload.js","sources":["../../../../../packages/components/upload/utils/upload.ts"],"sourcesContent":["import { ElMessage } from \"element-plus\";\nimport { FaMimeType } from \"@fast-element-plus/constants\";\nimport { consoleError, consoleWarn } from \"@fast-china/utils\";\nimport { isArray, isFunction } from \"lodash-unified\";\nimport type { UploadRawFile } from \"element-plus\";\n\nconst FaMimeTypeNames: Record<string, keyof typeof FaMimeType> = {};\n\nfor (const [kName, vAccept] of Object.entries(FaMimeType)) {\n\tvAccept.split(\",\").forEach((tItem) => {\n\t\tFaMimeTypeNames[tItem.trim()] = kName as keyof typeof FaMimeType;\n\t});\n}\n\n/**\n * 上传工具类\n */\nexport const uploadUtil = {\n\t/**\n\t * 识别文件类型\n\t */\n\tdetectFileType(accept: string): string {\n\t\tconst detectTypes = new Set<string>();\n\t\taccept.split(\",\").forEach((mimeType) => {\n\t\t\tdetectTypes.add(FaMimeTypeNames[mimeType] ?? mimeType);\n\t\t});\n\t\treturn Array.from(detectTypes).join(\",\");\n\t},\n\t/**\n\t * 获取props data属性值\n\t */\n\tgetPropsData(rawFile: UploadRawFile, data: any | any[] | ((rawFile: UploadRawFile) => any[])): any {\n\t\tlet propsData;\n\t\tif (isFunction(data)) {\n\t\t\tpropsData = data(rawFile);\n\t\t} else {\n\t\t\tpropsData = data;\n\t\t}\n\n\t\tconst result = {};\n\t\tif (isArray(data)) {\n\t\t\tdata.forEach((item) => {\n\t\t\t\tObject.assign(result, item);\n\t\t\t});\n\t\t} else {\n\t\t\tObject.assign(result, propsData);\n\t\t}\n\n\t\treturn result;\n\t},\n\t/**\n\t * 文件上传\n\t * @param url 地址\n\t * @param file 文件\n\t * @param fileName 文件名称\n\t * @param params 参数\n\t */\n\tasync uploadFile(url: string, file: File, fileName: string, params?: unknown): Promise<string> {\n\t\tif (!url) {\n\t\t\tconsoleError(\"uploadUtil\", \"文件上传地址为空！\");\n\t\t\tElMessage.error(\"文件上传地址为空！\");\n\t\t\treturn Promise.reject();\n\t\t}\n\t\tconst formData = new FormData();\n\t\tformData.append(\"file\", file);\n\t\tformData.append(\"fileName\", fileName);\n\t\tif (params) {\n\t\t\tObject.keys(params).forEach((key) => {\n\t\t\t\tformData.append(key, params[key]);\n\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"multipart/form-data\",\n\t\t\t\t},\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: formData,\n\t\t\t});\n\t\t\tif (!response.ok) {\n\t\t\t\tconsoleWarn(\"uploadUtil\", \"文件上传失败！\");\n\t\t\t\tElMessage.error(\"文件上传失败！\");\n\t\t\t\treturn Promise.reject();\n\t\t\t}\n\t\t\treturn await response.text();\n\t\t} catch (error) {\n\t\t\tconsoleWarn(\"uploadUtil\", \"文件上传失败！\");\n\t\t\tconsoleError(\"uploadUtil\", error);\n\t\t\tElMessage.error(\"文件上传失败！\");\n\t\t\treturn Promise.reject();\n\t\t}\n\t},\n\t/**\n\t * 文件上传\n\t * @param url 地址\n\t * @param file 文件\n\t * @param fileName 文件名称\n\t * @param params 参数\n\t */\n\tasync uploadFileByApi(api: (formData: FormData) => Promise<string>, file: File, fileName: string, params?: unknown): Promise<string> {\n\t\tif (!api) {\n\t\t\tconsoleError(\"uploadUtil\", \"文件上传接口为空！\");\n\t\t\tElMessage.error(\"文件上传接口为空！\");\n\t\t\treturn Promise.reject();\n\t\t}\n\t\tconst formData = new FormData();\n\t\tformData.append(\"file\", file);\n\t\tformData.append(\"fileName\", fileName);\n\t\tif (params) {\n\t\t\tObject.keys(params).forEach((key) => {\n\t\t\t\tformData.append(key, params[key]);\n\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve<string>(await api(formData));\n\t\t} catch (error) {\n\t\t\tconsoleWarn(\"uploadUtil\", \"文件上传失败！\");\n\t\t\tconsoleError(\"uploadUtil\", error);\n\t\t\tElMessage.error(\"文件上传失败！\");\n\t\t\treturn Promise.reject();\n\t\t}\n\t},\n};\n"],"names":["FaMimeTypeNames","kName","vAccept","Object","entries","FaMimeType","split","forEach","tItem","trim","uploadUtil","detectFileType","accept","detectTypes","Set","mimeType","add","Array","from","join","getPropsData","rawFile","data","propsData","isFunction","result","isArray","item","assign","uploadFile","url","file","fileName","params","consoleError","ElMessage","error","Promise","reject","formData","FormData","append","keys","key","response","fetch","headers","method","body","ok","text","consoleWarn","uploadFileByApi","api","resolve"],"mappings":"gQAMMA,EAA2D,CAAA,EAEjE,IAAA,MAAYC,EAAOC,KAAYC,OAAOC,QAAQC,EAAAA,YAC7CH,EAAQI,MAAM,KAAKC,QAASC,IAC3BR,EAAgBQ,EAAMC,QAAUR,IAO3B,MAAMS,EAAa,CAIzB,cAAAC,CAAeC,GACd,MAAMC,MAAkBC,IAIxB,OAHAF,EAAON,MAAM,KAAKC,QAASQ,IAC1BF,EAAYG,IAAIhB,EAAgBe,IAAaA,KAEvCE,MAAMC,KAAKL,GAAaM,KAAK,IACrC,EAIA,YAAAC,CAAaC,EAAwBC,GACpC,IAAIC,EAEHA,EADGC,EAAAA,WAAWF,GACFA,EAAKD,GAELC,EAGb,MAAMG,EAAS,CAAA,EASf,OARIC,EAAAA,QAAQJ,GACXA,EAAKf,QAASoB,IACbxB,OAAOyB,OAAOH,EAAQE,KAGvBxB,OAAOyB,OAAOH,EAAQF,GAGhBE,CACR,EAQA,gBAAMI,CAAWC,EAAaC,EAAYC,EAAkBC,GAC3D,IAAKH,EAGJ,OAFAI,EAAAA,aAAa,aAAc,aAC3BC,EAAAA,UAAUC,MAAM,aACTC,QAAQC,SAEhB,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQV,GACxBQ,EAASE,OAAO,WAAYT,GACxBC,GACH9B,OAAOuC,KAAKT,GAAQ1B,QAASoC,IAC5BJ,EAASE,OAAOE,EAAKV,EAAOU,MAG9B,IACC,MAAMC,QAAiBC,MAAMf,EAAK,CACjCgB,QAAS,CACR,eAAgB,uBAEjBC,OAAQ,OACRC,KAAMT,IAEP,OAAKK,EAASK,SAKDL,EAASM,QAJrBC,EAAAA,YAAY,aAAc,WAC1BhB,EAAAA,UAAUC,MAAM,WACTC,QAAQC,SAGjB,OAASF,GAIR,OAHAe,EAAAA,YAAY,aAAc,WAC1BjB,EAAAA,aAAa,aAAcE,GAC3BD,EAAAA,UAAUC,MAAM,WACTC,QAAQC,QAChB,CACD,EAQA,qBAAMc,CAAgBC,EAA8CtB,EAAYC,EAAkBC,GACjG,IAAKoB,EAGJ,OAFAnB,EAAAA,aAAa,aAAc,aAC3BC,EAAAA,UAAUC,MAAM,aACTC,QAAQC,SAEhB,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQV,GACxBQ,EAASE,OAAO,WAAYT,GACxBC,GACH9B,OAAOuC,KAAKT,GAAQ1B,QAASoC,IAC5BJ,EAASE,OAAOE,EAAKV,EAAOU,MAG9B,IACC,OAAON,QAAQiB,cAAsBD,EAAId,GAC1C,OAASH,GAIR,OAHAe,EAAAA,YAAY,aAAc,WAC1BjB,EAAAA,aAAa,aAAcE,GAC3BD,EAAAA,UAAUC,MAAM,WACTC,QAAQC,QAChB,CACD"}