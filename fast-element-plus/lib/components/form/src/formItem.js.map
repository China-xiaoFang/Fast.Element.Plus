{"version":3,"file":"formItem.js","sources":["../../../../../packages/components/form/src/formItem.tsx"],"sourcesContent":["import type { Ref, VNode } from \"vue\";\nimport { Fragment, computed, defineComponent, inject, ref } from \"vue\";\nimport { FaFormItemTip } from \"@fast-element-plus/components/formItemTip\";\nimport { FaLayoutGridItem } from \"@fast-element-plus/components/layoutGrid\";\nimport { makeSlots, useExpose, useProps, useRender } from \"@fast-element-plus/utils\";\nimport type { FormItemInstance } from \"element-plus\";\nimport { ElFormItem, formItemProps } from \"element-plus\";\nimport { isNumber } from \"lodash-unified\";\n\nexport const faFormItemProps = {\n\t...formItemProps,\n\t/** @description Label tips 提示 */\n\ttips: String,\n\t/** @description Grid 布局 */\n\tgrid: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n\t/** @description 偏移量 */\n\toffset: {\n\t\ttype: [String, Number],\n\t\tdefault: 0,\n\t},\n\t/** @description 栅格跨度 */\n\tspan: {\n\t\ttype: [String, Number],\n\t},\n\t/** @description 独占一行。如果设置 span 则无效 */\n\trow: Boolean,\n};\n\ntype FaFormItemSlots = {\n\t/** @description 默认内容插槽 */\n\tdefault: never;\n\t/** @description 标签位置显示的内容 */\n\tlabel: { label: string };\n\t/** @description 验证错误信息的显示内容 */\n\terror: { error: string };\n};\n\nexport default defineComponent({\n\tname: \"FaFormItem\",\n\tprops: faFormItemProps,\n\tslots: makeSlots<FaFormItemSlots>(),\n\tsetup(props, { attrs, slots, expose }) {\n\t\tconst formItemRef = ref<FormItemInstance>();\n\n\t\tconst cols = inject<Ref<number>>(\"cols\", ref(4));\n\n\t\t// 获取响应式设置\n\t\tconst getResponsive = (): {\n\t\t\tspan?: number;\n\t\t\toffset?: number;\n\t\t} => {\n\t\t\tif (!props.grid) return {};\n\t\t\tif (props.span) {\n\t\t\t\treturn {\n\t\t\t\t\tspan: isNumber(props.span) ? props.span : Number(props.span),\n\t\t\t\t\toffset: isNumber(props.offset) ? props.offset : Number(props.offset),\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst result = {\n\t\t\t\t\tspan: 1,\n\t\t\t\t\toffset: isNumber(props.offset) ? props.offset : Number(props.offset),\n\t\t\t\t};\n\t\t\t\tif (props.row) {\n\t\t\t\t\tresult.span = cols.value;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\n\t\tconst elFormItemProps = useProps(props, formItemProps);\n\n\t\tconst ParcelComponent = props.grid ? FaLayoutGridItem : Fragment;\n\n\t\tuseRender(() => (\n\t\t\t<ParcelComponent {...getResponsive()}>\n\t\t\t\t<ElFormItem ref={formItemRef} {...elFormItemProps.value}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tdefault: () => slots.default(),\n\t\t\t\t\t\t...((slots.label || props.tips) && {\n\t\t\t\t\t\t\tlabel: ({ label }: { label: string }): VNode[] =>\n\t\t\t\t\t\t\t\tprops.tips ? (\n\t\t\t\t\t\t\t\t\t<FaFormItemTip>\n\t\t\t\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t\t\t\tlabel: () => slots.label({ label }),\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t</FaFormItemTip>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\tslots.label({ label })\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t...(slots.error && { error: ({ error }: { error: string }): VNode[] => slots.error({ error }) }),\n\t\t\t\t\t}}\n\t\t\t\t</ElFormItem>\n\t\t\t</ParcelComponent>\n\t\t));\n\n\t\treturn useExpose(expose, {\n\t\t\t...computed(() => ({\n\t\t\t\t/** @description Size of the form item from the reference */\n\t\t\t\tsize: formItemRef.value?.size,\n\t\t\t\t/** @description Validation message from the form item */\n\t\t\t\tvalidateMessage: formItemRef.value?.validateMessage,\n\t\t\t\t/** @description Current validation state of the form item */\n\t\t\t\tvalidateState: formItemRef.value?.validateState,\n\t\t\t\t/** @description Function to validate the form item */\n\t\t\t\tvalidate: formItemRef.value?.validate,\n\t\t\t\t/** @description Function to clear validation status of the form item */\n\t\t\t\tclearValidate: formItemRef.value?.clearValidate,\n\t\t\t\t/** @description Reset the form item and clear validation results */\n\t\t\t\tresetField: formItemRef.value?.resetField,\n\t\t\t})).value,\n\t\t});\n\t},\n});\n"],"names":["faFormItemProps","formItemProps","tips","String","grid","type","Boolean","default","offset","Number","span","row","defineComponent","name","props","slots","makeSlots","setup","attrs","expose","formItemRef","ref","cols","inject","elFormItemProps","useProps","ParcelComponent","FaLayoutGridItem","Fragment","useExpose","useRender","_createVNode","getResponsive","isNumber","result","value","ElFormItem","_mergeProps","label","FaFormItemTip","error","computed","size","validateMessage","validateState","validate","clearValidate","resetField"],"mappings":"0dASaA,EAAkB,IAC3BC,EAAaA,cAEhBC,KAAMC,OAENC,KAAM,CACLC,KAAMC,QACNC,SAAS,GAGVC,OAAQ,CACPH,KAAM,CAACF,OAAQM,QACfF,QAAS,GAGVG,KAAM,CACLL,KAAM,CAACF,OAAQM,SAGhBE,IAAKL,SAYSM,oBAAgB,CAC9BC,KAAM,aACNC,MAAOd,EACPe,MAAOC,EAAAA,YACPC,KAAAA,CAAMH,GAAOI,MAAEA,EAAOH,MAAAA,EAAOI,OAAAA,IACtBC,MAAAA,EAAcC,EAAAA,MAEdC,EAAOC,EAAAA,OAAoB,OAAQF,EAAAA,IAAI,IAyBvCG,EAAkBC,EAAAA,SAASX,EAAOb,EAAaA,eAE/CyB,EAAkBZ,EAAMV,KAAOuB,EAAAA,iBAAmBC,EAAAA,SAyBjDC,OAvBPC,EAAAA,WAAU,IAAAC,EAAAA,YAAAL,EA1BYM,MAIrB,IAAKlB,EAAMV,KAAM,MAAO,GACxB,GAAIU,EAAMJ,KACF,MAAA,CACNA,KAAMuB,EAAAA,SAASnB,EAAMJ,MAAQI,EAAMJ,KAAOD,OAAOK,EAAMJ,MACvDF,OAAQyB,EAAAA,SAASnB,EAAMN,QAAUM,EAAMN,OAASC,OAAOK,EAAMN,SAExD,CACN,MAAM0B,EAAS,CACdxB,KAAM,EACNF,OAAQyB,EAAAA,SAASnB,EAAMN,QAAUM,EAAMN,OAASC,OAAOK,EAAMN,SAKvD0B,OAHHpB,EAAMH,MACTuB,EAAOxB,KAAOY,EAAKa,OAEbD,CACR,GAQqBF,GAAe,CAAAzB,QAAAA,IAAA,CAAAwB,cAAAK,EAAAA,WAAAC,EAAAA,WAAA,CAAAhB,IAClBD,GAAiBI,EAAgBW,OAAK,CAErD5B,QAASA,IAAMQ,EAAMR,cAChBQ,EAAMuB,OAASxB,EAAMZ,OAAS,CAClCoC,MAAOA,EAAGA,WACTxB,EAAMZ,KAAI6B,cAAAQ,EAAAA,cAAA,KAAA,CAGPD,MAAOA,IAAMvB,EAAMuB,MAAM,CAAEA,YAI7BvB,EAAMuB,MAAM,CAAEA,cAGbvB,EAAMyB,OAAS,CAAEA,MAAOA,EAAGA,WAAwCzB,EAAMyB,MAAM,CAAEA,kBAMlFX,EAAAA,UAAUV,EAAQ,IACrBsB,EAAQA,UAAC,qBAAO,MAAA,CAElBC,KAAMtB,OAAAA,EAAYe,EAAAA,YAAOO,EAAAA,EAAAA,KAEzBC,gBAAiBvB,OAAAA,EAAYe,EAAAA,YAAOQ,EAAAA,EAAAA,gBAEpCC,cAAexB,OAAAA,EAAYe,EAAAA,YAAOS,EAAAA,EAAAA,cAElCC,SAAUzB,OAAAA,EAAYe,EAAAA,YAAOU,EAAAA,EAAAA,SAE7BC,cAAe1B,OAAAA,EAAYe,EAAAA,YAAOW,EAAAA,EAAAA,cAElCC,WAAY3B,OAAAA,EAAYe,EAAAA,YAAOY,EAAAA,EAAAA,WAC/B,IAAGZ,OAEN"}