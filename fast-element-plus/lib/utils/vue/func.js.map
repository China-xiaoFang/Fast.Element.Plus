{"version":3,"file":"func.js","sources":["../../../../packages/utils/vue/func.ts"],"sourcesContent":["import { consoleError } from \"@fast-element-plus/utils\";\n\n/**\n * 执行方法\n * @param fn 要执行的方法\n * @param args 参数\n */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport const execFunction = async <T = void>(fn: Function, ...args: any[]): Promise<T> => {\n\tif (!fn) return Promise.resolve(undefined);\n\t// 判断是否为异步方法\n\tif (fn.constructor.name === \"AsyncFunction\") {\n\t\t// 异步方法\n\t\ttry {\n\t\t\treturn await fn(...args);\n\t\t} catch (error) {\n\t\t\tconsoleError(\"execFunction\", error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t} else {\n\t\t// 同步方法\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst res = fn(...args);\n\t\t\t\treturn resolve(res);\n\t\t\t} catch (error) {\n\t\t\t\tconsoleError(\"execFunction\", error);\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t});\n\t}\n};\n"],"names":["async","fn","args","Promise","resolve","constructor","name","reject","error"],"mappings":"6JAQ4BA,MAAiBC,KAAiBC,KAC7D,IAAKD,EAAW,OAAAE,QAAQC,aAAQ,GAE5B,GAAwB,kBAAxBH,EAAGI,YAAYC,KAUlB,OAAO,IAAIH,SAAQ,CAACC,EAASG,KACxB,IAEH,OAAOH,EADKH,KAAMC,UAEVM,GAER,sBADa,eAAgBA,GACtBD,EAAOC,EACf,KAfG,IACI,aAAMP,KAAMC,SACXM,GAED,sBADM,eAAgBA,GACtBL,QAAQI,OAAOC,EACvB,CAYD"}