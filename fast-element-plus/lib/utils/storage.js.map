{"version":3,"file":"storage.js","sources":["../../../packages/utils/storage.ts"],"sourcesContent":["/**\n * 本地缓存\n */\n\nimport { FastApp } from \"@fast-element-plus/settings\";\nimport { base64Util, consoleError } from \"@fast-element-plus/utils\";\n\n/**\n * 本地缓存前缀 Key\n */\nexport const CACHE_PREFIX = \"fast__\";\n\n/**\n * 本地缓存过期值后缀 Key\n */\nexport const CACHE_EXPIRE_SUFFIX = \"__Expire\";\n\n/**\n * window.localStorage\n */\nexport const Local = {\n\t/**\n\t * 设置\n\t * @param key 缓存的Key\n\t * @param val 缓存值\n\t * @param expire 过期时间，单位分钟\n\t * @param encrypt 是否对缓存的数据加密\n\t */\n\tset(key: string, val: any, expire?: number, encrypt?: boolean): void {\n\t\ttry {\n\t\t\tencrypt ??= FastApp.state.storageCrypto;\n\t\t\t// 判断是否存在缓存过期时间\n\t\t\tif (expire) {\n\t\t\t\tif (isNaN(expire) || expire < 1) {\n\t\t\t\t\tthrow new Error(\"有效期应为一个有效数值\");\n\t\t\t\t}\n\t\t\t\t// 设置过期时间的缓存\n\t\t\t\tconst expireData = {\n\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\texpire,\n\t\t\t\t};\n\t\t\t\tconst expireJson = JSON.stringify(expireData);\n\t\t\t\twindow.localStorage.setItem(`${CACHE_PREFIX}${key}${CACHE_EXPIRE_SUFFIX}`, expireJson);\n\t\t\t}\n\t\t\tlet valJson = JSON.stringify(val);\n\t\t\tif (encrypt) {\n\t\t\t\tvalJson = base64Util.toBase64(valJson);\n\t\t\t}\n\t\t\twindow.localStorage.setItem(`${CACHE_PREFIX}${key}`, valJson);\n\t\t} catch (error) {\n\t\t\tconsoleError(\"Local\", error);\n\t\t}\n\t},\n\t/**\n\t * 获取\n\t * @param key 缓存的Key\n\t * @param decrypt 是否对缓存的数据解密\n\t * @returns {T} 传入的对象类型，默认为 string\n\t */\n\tget<T = string>(key: string, decrypt?: boolean): T {\n\t\ttry {\n\t\t\tdecrypt ??= FastApp.state.storageCrypto;\n\t\t\t// 获取缓存 JSON 字符串\n\t\t\tlet valJson = window.localStorage.getItem(`${CACHE_PREFIX}${key}`);\n\t\t\tif (valJson) {\n\t\t\t\t// 判断是否解密\n\t\t\t\tif (decrypt) {\n\t\t\t\t\tvalJson = base64Util.base64ToStr(valJson);\n\t\t\t\t}\n\t\t\t\t// 尝试获取缓存过期时间的 JSON 字符串\n\t\t\t\tconst expireJson = window.localStorage.getItem(`${CACHE_PREFIX}${key}${CACHE_EXPIRE_SUFFIX}`);\n\t\t\t\t// 判断是否存在过期时间\n\t\t\t\tif (expireJson) {\n\t\t\t\t\tconst expireData = JSON.parse(expireJson);\n\t\t\t\t\tif (Date.now() > expireData.time + expireData.expire * 60 * 1000) {\n\t\t\t\t\t\t// 过期了，删除对应的缓存数据\n\t\t\t\t\t\twindow.localStorage.removeItem(`${CACHE_PREFIX}${key}`);\n\t\t\t\t\t\twindow.localStorage.removeItem(`${CACHE_PREFIX}${key}${CACHE_EXPIRE_SUFFIX}`);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\treturn JSON.parse(valJson) as T;\n\t\t\t\t} catch {\n\t\t\t\t\treturn valJson as T;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t} catch (error) {\n\t\t\tconsoleError(\"Local\", error);\n\t\t}\n\t},\n\t/**\n\t * 移除\n\t * @param key 缓存的Key\n\t */\n\tremove(key: string): void {\n\t\ttry {\n\t\t\twindow.localStorage.removeItem(`${CACHE_PREFIX}${key}`);\n\t\t\twindow.localStorage.removeItem(`${CACHE_PREFIX}${key}${CACHE_EXPIRE_SUFFIX}`);\n\t\t} catch (error) {\n\t\t\tconsoleError(\"Local\", error);\n\t\t}\n\t},\n\t/**\n\t * 根据前缀移除\n\t * @param key 缓存的Key\n\t */\n\tremoveByPrefix(key: string): void {\n\t\ttry {\n\t\t\tfor (const itemKey in window.localStorage) {\n\t\t\t\tif (itemKey.indexOf(`${CACHE_PREFIX}${key}`) !== -1) {\n\t\t\t\t\twindow.localStorage.removeItem(itemKey);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsoleError(\"Local\", error);\n\t\t}\n\t},\n\t/**\n\t * 移除全部\n\t */\n\tclear(): void {\n\t\ttry {\n\t\t\twindow.localStorage.clear();\n\t\t} catch (error) {\n\t\t\tconsoleError(\"Local\", error);\n\t\t}\n\t},\n};\n\n/**\n * window.sessionStorage\n */\nexport const Session = {\n\t/**\n\t * 设置会话缓存\n\t * @param key 缓存的Key\n\t * @param val 缓存值\n\t * @param expire 过期时间，单位分钟\n\t * @param encrypt 是否对缓存的数据加密\n\t */\n\tset(key: string, val: any, expire?: number, encrypt?: boolean): void {\n\t\ttry {\n\t\t\tencrypt ??= FastApp.state.storageCrypto;\n\t\t\t// 判断是否存在缓存过期时间\n\t\t\tif (expire) {\n\t\t\t\tif (isNaN(expire) || expire < 1) {\n\t\t\t\t\tthrow new Error(\"有效期应为一个有效数值\");\n\t\t\t\t}\n\t\t\t\t// 设置过期时间的缓存\n\t\t\t\tconst expireData = {\n\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\texpire,\n\t\t\t\t};\n\t\t\t\tconst expireJson = JSON.stringify(expireData);\n\t\t\t\twindow.sessionStorage.setItem(`${CACHE_PREFIX}${key}${CACHE_EXPIRE_SUFFIX}`, expireJson);\n\t\t\t}\n\t\t\tlet valJson = JSON.stringify(val);\n\t\t\tif (encrypt) {\n\t\t\t\tvalJson = base64Util.toBase64(valJson);\n\t\t\t}\n\t\t\twindow.sessionStorage.setItem(`${CACHE_PREFIX}${key}`, valJson);\n\t\t} catch (error) {\n\t\t\tconsoleError(\"Session\", error);\n\t\t}\n\t},\n\t/**\n\t * 获取会话缓存\n\t * @param key 缓存的Key\n\t * @param decrypt 是否对缓存的数据解密\n\t * @returns {T} 传入的对象类型，默认为 string\n\t */\n\tget<T = string>(key: string, decrypt?: boolean): T {\n\t\ttry {\n\t\t\tdecrypt ??= FastApp.state.storageCrypto;\n\t\t\t// 获取缓存 JSON 字符串\n\t\t\tlet valJson = window.sessionStorage.getItem(`${CACHE_PREFIX}${key}`);\n\t\t\tif (valJson) {\n\t\t\t\t// 判断是否解密\n\t\t\t\tif (decrypt) {\n\t\t\t\t\tvalJson = base64Util.base64ToStr(valJson);\n\t\t\t\t}\n\t\t\t\t// 尝试获取缓存过期时间的 JSON 字符串\n\t\t\t\tconst expireJson = window.sessionStorage.getItem(`${CACHE_PREFIX}${key}${CACHE_EXPIRE_SUFFIX}`);\n\t\t\t\t// 判断是否存在过期时间\n\t\t\t\tif (expireJson) {\n\t\t\t\t\tconst expireData = JSON.parse(expireJson);\n\t\t\t\t\tif (Date.now() > expireData.time + expireData.expire * 60 * 1000) {\n\t\t\t\t\t\t// 过期了，删除对应的缓存数据\n\t\t\t\t\t\twindow.sessionStorage.removeItem(`${CACHE_PREFIX}${key}`);\n\t\t\t\t\t\twindow.sessionStorage.removeItem(`${CACHE_PREFIX}${key}${CACHE_EXPIRE_SUFFIX}`);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\treturn JSON.parse(valJson) as T;\n\t\t\t\t} catch {\n\t\t\t\t\treturn valJson as T;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t} catch (error) {\n\t\t\tconsoleError(\"Session\", error);\n\t\t}\n\t},\n\t/**\n\t * 移除会话缓存\n\t * @param key 缓存的Key\n\t */\n\tremove(key: string): void {\n\t\ttry {\n\t\t\twindow.sessionStorage.removeItem(`${CACHE_PREFIX}${key}`);\n\t\t\twindow.sessionStorage.removeItem(`${CACHE_PREFIX}${key}${CACHE_EXPIRE_SUFFIX}`);\n\t\t} catch (error) {\n\t\t\tconsoleError(\"Session\", error);\n\t\t}\n\t},\n\t/**\n\t * 根据前缀移除会话缓存\n\t * @param key 缓存的Key\n\t */\n\tremoveByPrefix(key: string): void {\n\t\ttry {\n\t\t\tfor (const itemKey in window.sessionStorage) {\n\t\t\t\tif (itemKey.indexOf(`${CACHE_PREFIX}${key}`) !== -1) {\n\t\t\t\t\twindow.sessionStorage.removeItem(itemKey);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsoleError(\"Session\", error);\n\t\t}\n\t},\n\t/**\n\t * 移除全部会话缓存\n\t */\n\tclear(): void {\n\t\ttry {\n\t\t\twindow.sessionStorage.clear();\n\t\t} catch (error) {\n\t\t\tconsoleError(\"Session\", error);\n\t\t}\n\t},\n};\n"],"names":["CACHE_PREFIX","CACHE_EXPIRE_SUFFIX","Local","set","key","val","expire","encrypt","FastApp","state","storageCrypto","isNaN","Error","expireData","time","Date","now","expireJson","JSON","stringify","window","localStorage","setItem","valJson","base64Util","toBase64","error","get","decrypt","getItem","base64ToStr","parse","removeItem","remove","removeByPrefix","itemKey","indexOf","clear","Session","sessionStorage"],"mappings":"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"}