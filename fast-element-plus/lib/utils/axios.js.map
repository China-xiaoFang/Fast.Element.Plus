{"version":3,"file":"axios.js","sources":["../../../packages/utils/axios.ts"],"sourcesContent":["import { FastApp } from \"@fast-element-plus/settings\";\nimport { Local, consoleDebug, consoleError, consoleLog, consoleWarn } from \"@fast-element-plus/utils\";\nimport type { AxiosError, AxiosRequestConfig, AxiosResponse, InternalAxiosRequestConfig } from \"axios\";\nimport axios from \"axios\";\nimport { ElLoading, ElMessage, ElMessageBox, type LoadingOptions } from \"element-plus\";\nimport { isObject, isString } from \"lodash-unified\";\nimport { cryptoUtil } from \"./crypto\";\n\n/**\n * RESTful风格Api响应\n */\nexport type ApiResponse<Input = any, Output = any> = {\n\t/**\n\t * 执行成功\n\t */\n\tsuccess?: boolean;\n\t/**\n\t * 状态码\n\t */\n\tcode?: number;\n\t/**\n\t * 错误信息\n\t */\n\tmessage?: string;\n\t/**\n\t * 数据\n\t */\n\tdata?: Output;\n\t/**\n\t * 时间戳\n\t */\n\ttimestamp?: number;\n\t/**\n\t * 响应\n\t */\n\tresponse?: AxiosResponse<Output, Input>;\n};\n\n/**\n * RESTful风格Api Promise\n */\nexport type ApiPromise<Input = any, Output = any> = Promise<ApiResponse<Input, Output>>;\n\n/**\n * Axios 选项\n */\nexport type AxiosOptions = {\n\t/**\n\t * 是否开启取消重复请求, 默认为\n\t * @default true\n\t */\n\tcancelDuplicateRequest?: boolean;\n\t/**\n\t * 是否开启loading层效果\n\t * @default false\n\t */\n\tloading?: boolean;\n\t/**\n\t * 是否开启缓存，只有Get请求才行\n\t * @default false\n\t */\n\tcache?: boolean;\n\t/**\n\t * 忽略错误\n\t * @default false\n\t */\n\tignoreError?: boolean;\n\t/**\n\t * Get请求缓存问题处理\n\t * @default true\n\t */\n\tgetMethodCacheHandle?: boolean;\n\t/**\n\t * 是否开启简洁的数据结构响应\n\t * - 只有响应格式是JSON的才开启\n\t * @default true\n\t */\n\tsimpleDataFormat?: boolean;\n\t/**\n\t * 是否开启接口错误信息展示\n\t * @default true\n\t */\n\tshowErrorMessage?: boolean;\n\t/**\n\t * 是否开启code信息提示\n\t * - code >= 200 && code <= 299 则不提示\n\t * @default true\n\t */\n\tshowCodeMessage?: boolean;\n\t/**\n\t * 是否开启请求成功的信息提示\n\t * - 只有 code >= 200 && code <= 299 才提示\n\t * @default false\n\t */\n\tshowSuccessMessage?: boolean;\n\t/**\n\t * 是否开启自动下载文件\n\t * - 只有 responseType 配置了 \"blob\" 才会自动下载\n\t * @default true\n\t */\n\tautoDownloadFile?: boolean;\n};\n\n/**\n * Http 缓存 Key\n */\nexport const HTTP_CACHE_KEY = \"HTTP_CACHE_\";\n\nconst axiosOptions: AxiosOptions = {\n\tcancelDuplicateRequest: true,\n\tloading: false,\n\tcache: false,\n\tignoreError: false,\n\tgetMethodCacheHandle: true,\n\tsimpleDataFormat: true,\n\tshowErrorMessage: true,\n\tshowCodeMessage: true,\n\tshowSuccessMessage: false,\n\tautoDownloadFile: true,\n};\n\nconst loadingOptions: LoadingOptions = {\n\tfullscreen: true,\n\tlock: true,\n\ttext: \"加载中...\",\n\tbackground: \"rgba(0, 0, 0, 0.7)\",\n};\n\nconst errorCodeMessages = {\n\tcancelDuplicate: \"重复请求，自动取消！\",\n\toffLine: \"您断网了！\",\n\tfileDownloadError: \"文件下载失败或此文件不存在！\",\n\t302: \"接口重定向了！\",\n\t400: \"参数不正确！\",\n\t401: \"您没有权限操作（令牌、用户名、密码错误）！\",\n\t403: \"您的访问是被禁止的！\",\n\t404: \"请求的资源不存在！\",\n\t405: \"请求的格式不正确！\",\n\t408: \"请求超时！\",\n\t409: \"系统已存在相同数据！\",\n\t410: \"请求的资源被永久删除，且不会再得到的！\",\n\t422: \"当创建一个对象时，发生一个验证错误！\",\n\t429: \"请求过于频繁，请稍后再试！\",\n\t500: \"服务器内部错误！\",\n\t501: \"服务未实现！\",\n\t502: \"网关错误！\",\n\t503: \"服务不可用，服务器暂时过载或维护！\",\n\t504: \"服务暂时无法访问，请稍后再试！\",\n\t505: \"HTTP版本不受支持！\",\n\tdefault: \"请求错误！\",\n\tERR_NETWORK: \"网关错误，服务不可用，服务器暂时过载或维护！\",\n};\n\nconst pendingMap = new Map();\n\n/**\n * 加载实例\n */\nconst loadingInstance = {\n\t// ElLoading 的实例信息\n\ttarget: null,\n\t// 总数\n\tcount: 0,\n};\n\n/**\n * 关闭Loading层实例\n */\nconst closeLoading = (options: AxiosOptions): void => {\n\tif (options.loading && loadingInstance.count > 0) loadingInstance.count--;\n\tif (loadingInstance.count === 0) {\n\t\tloadingInstance.target.close();\n\t\tloadingInstance.target = null;\n\t}\n};\n\n/**\n * 生成每个请求的唯一key\n */\nconst getPendingKey = (axiosConfig: AxiosRequestConfig): string => {\n\tlet { data } = axiosConfig;\n\tconst { url, method, params } = axiosConfig;\n\t// response里面返回的config.data是个字符串对象\n\tif (isString(data)) data = JSON.parse(data);\n\treturn [url, method, JSON.stringify(params), JSON.stringify(data)].join(\"&\");\n};\n\n/**\n * 储存每个请求的唯一cancel回调, 以此为标识\n */\nconst addPending = (pendingKey: string, axiosConfig: AxiosRequestConfig): void => {\n\taxiosConfig.cancelToken =\n\t\taxiosConfig.cancelToken ||\n\t\tnew axios.CancelToken((cancel) => {\n\t\t\tif (!pendingMap.has(pendingKey)) {\n\t\t\t\tpendingMap.set(pendingKey, cancel);\n\t\t\t}\n\t\t});\n};\n\n/**\n * 删除重复的请求\n */\nconst removePending = (pendingKey: string): void => {\n\tif (pendingMap.has(pendingKey)) {\n\t\tconst cancelToken = pendingMap.get(pendingKey);\n\t\tcancelToken(pendingKey);\n\t\tpendingMap.delete(pendingKey);\n\t}\n};\n\n/**\n * Http 错误状态码处理\n */\nconst httpErrorStatusHandle = (error: AxiosError | any): void => {\n\t// 判断请求是否被取消\n\tif (axios.isCancel(error)) {\n\t\treturn;\n\t}\n\tlet message = \"\";\n\t// 判断是否断网\n\tif (!window.navigator.onLine) {\n\t\tmessage = errorCodeMessages[\"offLine\"];\n\t} else {\n\t\t// 其他错误码处理\n\t\t// 尝试获取 Restful 风格返回Code，或者获取响应状态码\n\t\tconst code = error?.response?.data?.code || error?.response?.status || error?.code || \"default\";\n\t\t// 400业务异常\n\t\t// 500服务器内部错误，可能返回错误信息\n\t\tmessage = error?.response?.data?.message || errorCodeMessages[code];\n\t}\n\tElMessage.error(message);\n};\n\n/**\n * 获取错误信息\n */\nconst getPromiseReject = <Input = any, Output = any>(\n\toptions: AxiosRequestConfig<Input> & AxiosOptions,\n\tcode = 500,\n\tmessage?: string,\n\tdata?: any,\n\tresponse?: AxiosResponse<Output, Input>\n): Promise<any> => {\n\tif (options.simpleDataFormat) {\n\t\treturn Promise.resolve({\n\t\t\tsuccess: false,\n\t\t\tcode,\n\t\t\tmessage,\n\t\t\tdata,\n\t\t\ttimestamp: Date.now(),\n\t\t\tresponse,\n\t\t} as Output);\n\t} else {\n\t\treturn Promise.resolve(response);\n\t}\n};\n\n/**\n * 下载文件\n */\nconst downloadFile = (response: AxiosResponse): void => {\n\tconst blob = new Blob([response.data], { type: \"application/octet-stream;charset=UTF-8\" });\n\tconst contentDisposition = response.headers[\"content-disposition\"];\n\tconst pat = new RegExp(\"filename=([^;]+\\\\.[^\\\\.;]+);*\");\n\tconst result = pat.exec(contentDisposition);\n\tconst filename = result[1];\n\tconst downloadElement = document.createElement(\"a\");\n\tconst href = window.URL.createObjectURL(blob); // 创建下载的链接\n\tconst reg = /^[\"](.*)[\"]$/g;\n\tdownloadElement.style.display = \"none\";\n\tdownloadElement.href = href;\n\tdownloadElement.download = decodeURI(filename.replace(reg, \"$1\")); // 下载后文件名\n\tdocument.body.appendChild(downloadElement);\n\t// 点击下载\n\tdownloadElement.click();\n\t// 下载完成移除元素\n\tdocument.body.removeChild(downloadElement);\n\twindow.URL.revokeObjectURL(href);\n};\n\n/**\n * 创建 Axios\n * @param axiosConfig axios 请求配置\n * @param loading loading配置\n */\nconst createAxios = <Input = any, Output = any>(axiosConfig: AxiosRequestConfig<Input> & AxiosOptions, loading?: LoadingOptions): Promise<Output> => {\n\t// 合并选项\n\tconst options = { ...axiosOptions, ...axiosConfig };\n\n\t// 只有Get请求并且开启了简洁响应才可以进行缓存处理，且默认是不存在loading的\n\tif (options.cache && options.method.toUpperCase() === \"GET\" && options.simpleDataFormat) {\n\t\t// 如果启用缓存，则默认是不能携带参数的\n\t\tif (options.params) {\n\t\t\tconsoleWarn(\"axiosUtil\", \"如果使用 Http Cache，则不能存在任何 'params' 参数\");\n\t\t\treturn getPromiseReject<Input, Output>(\n\t\t\t\toptions,\n\t\t\t\t405,\n\t\t\t\t\"如果使用 Http Cache，则不能存在任何 'params' 参数\",\n\t\t\t\tnew Error(\"如果使用 Http Cache，则不能存在任何 'params' 参数\")\n\t\t\t);\n\t\t}\n\n\t\tconst cacheKey = `${HTTP_CACHE_KEY}${options.url}`;\n\t\tconst cacheRes = Local.get<Output>(cacheKey);\n\t\tif (cacheRes) {\n\t\t\treturn Promise.resolve(cacheRes);\n\t\t}\n\t} else {\n\t\t// 不满足上述条件，则默认不使用缓存\n\t\toptions.cache = false;\n\t}\n\n\t// 获取请求唯一 Key\n\tconst pendingKey = getPendingKey(axiosConfig);\n\n\tconst timestamp = new Date().getTime();\n\n\t// 创建 Axios 请求\n\tconst Axios = axios.create({\n\t\tbaseURL: FastApp.state.axios.baseUrl,\n\t\ttimeout: FastApp.state.axios.timeout,\n\t\theaders: {\n\t\t\t\"Gejia-DeviceID\": window.deviceId,\n\t\t\t// 配置请求来源，标识为PC端\n\t\t\t\"Gejia-DeviceType\": \"Web\",\n\t\t},\n\t\tresponseType: \"json\",\n\t});\n\n\t/**\n\t * 请求拦截\n\t */\n\tAxios.interceptors.request.use(\n\t\t(config: InternalAxiosRequestConfig<Input>) => {\n\t\t\t// 删除重复请求\n\t\t\tremovePending(pendingKey);\n\n\t\t\t// 判断是否开启取消重复请求\n\t\t\toptions.cancelDuplicateRequest && addPending(pendingKey, config);\n\n\t\t\t// 自定义请求拦截器\n\t\t\tFastApp.state.axios.interceptors.request && FastApp.state.axios.interceptors.request(config);\n\n\t\t\t// 判断是否显示loading层\n\t\t\tif (options.loading) {\n\t\t\t\tloadingInstance.count++;\n\t\t\t\tif (loadingInstance.count === 1) {\n\t\t\t\t\t// 合并 Loading 配置\n\t\t\t\t\tloading = { ...loadingOptions, ...loading };\n\t\t\t\t\tloadingInstance.target = ElLoading.service(loading);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 请求参数加密\n\t\t\tif (FastApp.state.axios.requestCipher) {\n\t\t\t\tlet requestData = config.params || config.data;\n\t\t\t\tconst dataStr = JSON.stringify(requestData);\n\t\t\t\tif (dataStr != null && dataStr != \"\" && dataStr != \"{}\") {\n\t\t\t\t\tconsoleDebug(\"axiosUtil\", `HTTP request data(\"${config.url}\")`, requestData);\n\t\t\t\t\tconst decryptData = cryptoUtil.aes.encrypt(dataStr, `${timestamp}`, `FIV${timestamp}`);\n\t\t\t\t\t// 组装请求格式\n\t\t\t\t\trequestData = {\n\t\t\t\t\t\tdata: decryptData,\n\t\t\t\t\t\ttimestamp,\n\t\t\t\t\t};\n\t\t\t\t\tswitch (config.method.toUpperCase()) {\n\t\t\t\t\t\tcase \"GET\":\n\t\t\t\t\t\tcase \"DELETE\":\n\t\t\t\t\t\tcase \"HEAD\":\n\t\t\t\t\t\t\tconfig.params = requestData;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"POST\":\n\t\t\t\t\t\tcase \"PUT\":\n\t\t\t\t\t\tcase \"PATCH\":\n\t\t\t\t\t\t\tconfig.data = requestData;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"OPTIONS\":\n\t\t\t\t\t\tcase \"CONNECT\":\n\t\t\t\t\t\tcase \"TRACE\":\n\t\t\t\t\t\t\tthrow new Error(\"This request mode is not supported.\");\n\t\t\t\t\t}\n\t\t\t\t\t// 请求头部增加加密标识\n\t\t\t\t\tconfig.headers[\"Fast-Request-Encipher\"] = \"true\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Get请求缓存处理\n\t\t\t\tif (config.method.toUpperCase() === \"GET\") {\n\t\t\t\t\tconfig.params = config.params || {};\n\t\t\t\t\tconfig.params._ = timestamp;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn config;\n\t\t},\n\t\t(error) => {\n\t\t\treturn getPromiseReject<Input, Output>(options, 500, \"应用程序内部错误！\", error);\n\t\t}\n\t);\n\n\t/**\n\t * 响应拦截\n\t */\n\tAxios.interceptors.response.use(\n\t\t(response: AxiosResponse<Output, Input>) => {\n\t\t\t// 删除重复请求\n\t\t\tremovePending(pendingKey);\n\n\t\t\t// 关闭loading层\n\t\t\toptions.loading && closeLoading(options);\n\n\t\t\t// 判断是否忽略错误\n\t\t\tif (options.ignoreError) {\n\t\t\t\treturn Promise.resolve(response);\n\t\t\t}\n\n\t\t\t// 自定义响应拦截器\n\t\t\tif (FastApp.state.axios.interceptors.response) {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = FastApp.state.axios.interceptors.response(response);\n\t\t\t\t\tif (result != null && result != undefined) {\n\t\t\t\t\t\treturn Promise.resolve(result);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// 判断是否忽略错误\n\t\t\t\t\tif (options.ignoreError) {\n\t\t\t\t\t\treturn Promise.resolve(response);\n\t\t\t\t\t}\n\t\t\t\t\treturn getPromiseReject<Input, Output>(options, 500, \"应用程序内部错误！\", error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tswitch (response.config.responseType) {\n\t\t\t\t// 配置了blob，不处理直接返回文件流\n\t\t\t\tcase \"blob\":\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t// 判断是否自动下载\n\t\t\t\t\t\tif (options.autoDownloadFile) {\n\t\t\t\t\t\t\tdownloadFile(response);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 这里直接返回\n\t\t\t\t\t\treturn Promise.resolve(response);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tElMessage.error(errorCodeMessages[\"fileDownloadError\"]);\n\t\t\t\t\t\treturn Promise.reject(response);\n\t\t\t\t\t}\n\t\t\t\tcase \"json\":\n\t\t\t\t\t{\n\t\t\t\t\t\tconst responseData = response.data;\n\t\t\t\t\t\tconst restfulData = response.data as ApiResponse<Input, Output>;\n\t\t\t\t\t\tconst code: number = restfulData?.code ?? response.status;\n\t\t\t\t\t\tif (code < 200 || code > 299 || !restfulData?.success) {\n\t\t\t\t\t\t\t// 判断是否显示错误消息\n\t\t\t\t\t\t\tif (options.showCodeMessage) {\n\t\t\t\t\t\t\t\t// 判断返回的 message 是否为对象类型\n\t\t\t\t\t\t\t\tif (restfulData?.message) {\n\t\t\t\t\t\t\t\t\tif (isObject(restfulData?.message)) {\n\t\t\t\t\t\t\t\t\t\tElMessage.error(JSON.stringify(restfulData?.message));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tElMessage.error(restfulData?.message);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn getPromiseReject<Input, Output>(\n\t\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\t\tresponseData[\"message\"] ?? \"服务器内部错误！\",\n\t\t\t\t\t\t\t\t\trestfulData?.data ?? responseData,\n\t\t\t\t\t\t\t\t\tresponse\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// 请求响应解密\n\t\t\t\t\t\t\tif (FastApp.state.axios.requestCipher) {\n\t\t\t\t\t\t\t\tif (restfulData?.data) {\n\t\t\t\t\t\t\t\t\trestfulData.data = cryptoUtil.aes.decrypt<Output>(\n\t\t\t\t\t\t\t\t\t\trestfulData.data as string,\n\t\t\t\t\t\t\t\t\t\t`${restfulData.timestamp}`,\n\t\t\t\t\t\t\t\t\t\t`FIV${restfulData.timestamp}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t// 处理 \"\"xxx\"\" 这种数据\n\t\t\t\t\t\t\t\t\tif (isString(restfulData.data) && restfulData.data.startsWith('\"') && restfulData.data.endsWith('\"')) {\n\t\t\t\t\t\t\t\t\t\trestfulData.data = restfulData.data.replace(/\"/g, \"\") as Output;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconsoleDebug(\"axiosUtil\", `HTTP response data(\"${response.config.url}\")`, restfulData.data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// 判断是否缓存\n\t\t\t\t\t\t\tif (options.cache) {\n\t\t\t\t\t\t\t\tconst cacheKey = `${HTTP_CACHE_KEY}${options.url}`;\n\t\t\t\t\t\t\t\t// 默认缓存24小时\n\t\t\t\t\t\t\t\tLocal.set(cacheKey, restfulData?.data ?? responseData, 60 * 24);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (options.simpleDataFormat) {\n\t\t\t\t\t\t\t\treturn Promise.resolve({ ...(restfulData?.data ?? responseData), response });\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Promise.resolve(response);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (options.simpleDataFormat) {\n\t\t\t\t\t\treturn Promise.resolve({ ...response.data, response });\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Promise.resolve(response);\n\t\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t(error: AxiosError | any) => {\n\t\t\t// 删除重复请求标识\n\t\t\terror?.config && removePending(error?.config);\n\t\t\t// 关闭loading层\n\t\t\toptions.loading && closeLoading(options);\n\t\t\t// 判断请求是否被取消\n\t\t\tif (!axios.isCancel(error)) {\n\t\t\t\tconsoleError(\"axiosUtil\", errorCodeMessages[\"cancelDuplicate\"], error);\n\t\t\t}\n\n\t\t\t// 自定义响应错误\n\t\t\tif (FastApp.state.axios.interceptors.responseError) {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = FastApp.state.axios.interceptors.responseError(error);\n\t\t\t\t\tif (result != null && result != undefined) {\n\t\t\t\t\t\treturn Promise.reject(result);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn getPromiseReject<Input, Output>(options, 500, \"应用程序内部错误！\", error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 处理错误状态码\n\t\t\toptions.showErrorMessage && httpErrorStatusHandle(error);\n\n\t\t\t// 错误继续返回给到具体页面\n\t\t\treturn getPromiseReject<Input, Output>(options, 500, \"服务器内部错误！\", error);\n\t\t}\n\t);\n};\n\n/**\n * 是否存在版本更新实例\n */\nlet existsVersionUpdateInstance = false;\n\n/**\n * 检测版本更新\n */\nconst versionUpdate = (version: string): void => {\n\tconsoleLog(\"axiosUtil\", `当前版本 ${version}`);\n\n\taxios\n\t\t.get<{ version: string; dateTime: string }>(`/version.json?_=${Date.now()}`)\n\t\t.then((response) => {\n\t\t\t// 开发环境判断\n\t\t\tif (FastApp.state.env === \"development\") return;\n\n\t\t\tif (version !== response.data.version) {\n\t\t\t\t// 判断是否存在版本更新实例弹窗\n\t\t\t\tif (existsVersionUpdateInstance) return;\n\t\t\t\texistsVersionUpdateInstance = true;\n\t\t\t\tconsoleLog(\"axiosUtil\", `发现新版本 ${response.data.version}`);\n\t\t\t\tElMessageBox.confirm(`发现新版本 ${response.data.version}，是否立即更新？`, {\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tconfirmButtonText: \"更新\",\n\t\t\t\t\tcloseOnClickModal: false,\n\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tconsoleLog(\"axiosUtil\", `更新版本 ${response.data.version}`);\n\t\t\t\t\t\t// 强制刷新浏览器\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\texistsVersionUpdateInstance = false;\n\t\t\t\t\t\tconsoleWarn(\"axiosUtil\", `取消更新版本 ${response.data.version}`);\n\t\t\t\t\t\tElMessage.warning({\n\t\t\t\t\t\t\tmessage: \"您取消了更新，将在十分钟后再次进行提示！\",\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\t.then((error) => {\n\t\t\tconsoleError(\"axiosUtil\", \"检测版本更新错误。\", error);\n\t\t});\n};\n\n/**\n * 检测版本更新\n * @default 默认10分钟一次\n */\nconst checkVersionUpdate = (version: string, delay = 10 * 60 * 1000): void => {\n\tversionUpdate(version);\n\tsetInterval(() => {\n\t\tversionUpdate(version);\n\t}, delay);\n};\n\nexport const axiosUtil = {\n\t/**\n\t * 请求\n\t * @param axiosConfig axios 请求配置\n\t * @param loading loading配置\n\t */\n\trequest: createAxios,\n\t/**\n\t * 删除HTTP 缓存数据\n\t */\n\tdeleteHttpCache: (): void => {\n\t\tLocal.removeByPrefix(HTTP_CACHE_KEY);\n\t},\n\t/**\n\t * 检测版本更新\n\t * @default 默认10分钟一次\n\t */\n\tcheckVersionUpdate,\n};\n"],"names":["HTTP_CACHE_KEY","axiosOptions","cancelDuplicateRequest","loading","cache","ignoreError","getMethodCacheHandle","simpleDataFormat","showErrorMessage","showCodeMessage","showSuccessMessage","autoDownloadFile","loadingOptions","fullscreen","lock","text","background","errorCodeMessages","cancelDuplicate","offLine","fileDownloadError","default","ERR_NETWORK","pendingMap","Map","loadingInstance","target","count","closeLoading","options","close","removePending","pendingKey","has","get","cancelToken","delete","getPromiseReject","code","message","data","response","Promise","resolve","success","timestamp","Date","now","existsVersionUpdateInstance","versionUpdate","version","consoleLog","axios","then","FastApp","state","env","ElMessageBox","confirm","type","confirmButtonText","closeOnClickModal","window","location","reload","catch","consoleWarn","ElMessage","warning","error","consoleError","axiosUtil","request","axiosConfig","method","toUpperCase","params","Error","cacheKey","url","cacheRes","Local","isString","JSON","parse","stringify","join","getPendingKey","getTime","Axios","create","baseURL","baseUrl","timeout","headers","deviceId","responseType","interceptors","use","config","CancelToken","cancel","set","addPending","ElLoading","service","requestCipher","requestData","dataStr","consoleDebug","cryptoUtil","aes","encrypt","_","result","status","blob","Blob","contentDisposition","filename","RegExp","exec","downloadElement","document","createElement","href","URL","createObjectURL","style","display","download","decodeURI","replace","body","appendChild","click","removeChild","revokeObjectURL","downloadFile","reject","responseData","restfulData","isObject","decrypt","startsWith","endsWith","isCancel","responseError","navigator","onLine","_b","_a","_c","_e","_d","httpErrorStatusHandle","deleteHttpCache","removeByPrefix","checkVersionUpdate","delay","setInterval"],"mappings":"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"}