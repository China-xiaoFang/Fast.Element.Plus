{"version":3,"file":"element-plus.js","sources":["../../packages/element-plus.ts"],"sourcesContent":["/** Element Plus 组件全局配置 */\n\nimport type { App, PropType } from \"vue\";\nimport * as ElementPlusIconsVue from \"@element-plus/icons-vue\";\nimport { useOverlay } from \"@fast-element-plus/hooks\";\nimport { consoleError, errorHandler, execFunction } from \"@fast-element-plus/utils\";\nimport type { Action, ElMessageBoxOptions, MessageBoxData, MessageBoxState, TableProps } from \"element-plus\";\nimport ElementPlus, { ElDialog, ElInput, ElInputNumber, ElMessageBox, ElTable } from \"element-plus\";\n\nElDialog.props = {\n\t...ElDialog.props,\n\t/**\n\t * 默认拖拽\n\t * @description enable dragging feature for Dialog\n\t */\n\tdraggable: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n};\n\nElInput.props = {\n\t...ElInput.props,\n\t/**\n\t * 默认显示统计字数\n\t * @description word count\n\t */\n\tshowWordLimit: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n};\n\nElInputNumber.props = {\n\t...ElInputNumber.props,\n\t/**\n\t * 默认不使用控制按钮\n\t * @description whether to enable the control buttons\n\t */\n\tcontrols: {\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t},\n};\n\nElTable.props = {\n\t...ElTable.props,\n\t/**\n\t * 默认显示边框\n\t * @description whether Table has vertical border\n\t */\n\tborder: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n\t/**\n\t * 默认高亮当前行\n\t * @description whether current row is highlighted\n\t */\n\thighlightCurrentRow: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n\t/**\n\t * 默认行Key为 \"id\"\n\t * @description key of row data, used for optimizing rendering. Required if `reserve-selection` is on or display tree data. When its type is String, multi-level access is supported, e.g. `user.info.id`, but `user.info[0].id` is not supported, in which case `Function` should be used\n\t */\n\trowKey: {\n\t\ttype: [String, Function] as PropType<TableProps<any>[\"rowKey\"]>,\n\t\tdefault: \"id\",\n\t},\n};\n\n// ElMessageBox 默认配置\nconst elMessageBox = (\n\tmessage: ElMessageBoxOptions[\"message\"],\n\toptions: ElMessageBoxOptions,\n\ttype: \"alert\" | \"confirm\" | \"prompt\"\n): Promise<MessageBoxData> => {\n\toptions = options ?? {};\n\tif (!options?.title) {\n\t\t// 默认提示\n\t\toptions.title = \"温馨提示\";\n\t}\n\tif (options?.draggable == undefined) {\n\t\t// 默认拖拽\n\t\toptions.draggable = true;\n\t}\n\tif (!options?.cancelButtonText) {\n\t\t// 默认 取消按钮的文本内容\n\t\toptions.cancelButtonText = \"取消\";\n\t}\n\tif (!options?.confirmButtonText) {\n\t\t// 默认 确定按钮的文本内容\n\t\toptions.confirmButtonText = \"确定\";\n\t}\n\tif (options?.closeOnClickModal == undefined) {\n\t\t// 默认 是否可通过点击遮罩层关闭 MessageBox\n\t\toptions.closeOnClickModal = false;\n\t}\n\tif (options?.closeOnPressEscape == undefined) {\n\t\t// 默认 是否可通过按下 ESC 键关闭 MessageBox\n\t\toptions.closeOnPressEscape = false;\n\t}\n\n\t// 关闭之前的判断逻辑\n\tif (options?.beforeClose != undefined) {\n\t\tconst localBeforeClose = options.beforeClose;\n\t\tconst localConfirmButtonText = options?.confirmButtonText ?? \"确定\";\n\t\tconst localShowCancelButton = options?.showCancelButton ?? false;\n\t\toptions.beforeClose = (action: Action, instance: MessageBoxState, done: () => void): void => {\n\t\t\tif (action === \"confirm\") {\n\t\t\t\tuseOverlay.show(0);\n\t\t\t\tinstance.confirmButtonLoading = true;\n\t\t\t\tinstance.showCancelButton = false;\n\t\t\t\tinstance.confirmButtonText = \"加载中...\";\n\n\t\t\t\tconst cancelLoading = (): void => {\n\t\t\t\t\tinstance.confirmButtonLoading = false;\n\t\t\t\t\tinstance.showCancelButton = localShowCancelButton;\n\t\t\t\t\tinstance.confirmButtonText = localConfirmButtonText;\n\t\t\t\t\tuseOverlay.hide();\n\t\t\t\t};\n\n\t\t\t\tconst newDone = (): void => {\n\t\t\t\t\tcancelLoading();\n\t\t\t\t\tdone();\n\t\t\t\t};\n\n\t\t\t\texecFunction(localBeforeClose, action, instance, newDone)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tnewDone();\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tconsoleError(\"MessageBox\", error);\n\t\t\t\t\t\tcancelLoading();\n\t\t\t\t\t\terrorHandler(error);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t}\n\n\t// 根据类型有一些判断\n\tswitch (type) {\n\t\tcase \"alert\":\n\t\t\tbreak;\n\t\tcase \"confirm\":\n\t\t\tif (options?.showCancelButton == undefined) {\n\t\t\t\toptions.showCancelButton = true;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"prompt\":\n\t\t\tif (options?.showCancelButton == undefined) {\n\t\t\t\toptions.showCancelButton = true;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn ElMessageBox(\n\t\tObject.assign(\n\t\t\t{\n\t\t\t\tmessage,\n\t\t\t},\n\t\t\toptions,\n\t\t\t{\n\t\t\t\tboxType: type,\n\t\t\t}\n\t\t)\n\t);\n};\n\nElMessageBox.alert = (message: ElMessageBoxOptions[\"message\"], options?: ElMessageBoxOptions): Promise<MessageBoxData> =>\n\telMessageBox(message, options, \"alert\");\n\nElMessageBox.prompt = (message: ElMessageBoxOptions[\"message\"], options?: ElMessageBoxOptions): Promise<MessageBoxData> =>\n\telMessageBox(message, options, \"prompt\");\n\nElMessageBox.confirm = (message: ElMessageBoxOptions[\"message\"], options?: ElMessageBoxOptions): Promise<MessageBoxData> =>\n\telMessageBox(message, options, \"confirm\");\n\nexport const installElementPlus = (app: App): void => {\n\t/** 注册所有 Element Plus Icon */\n\tfor (const [key, component] of Object.entries(ElementPlusIconsVue)) {\n\t\t// 这里是给 FaIcon 使用的\n\t\tapp.component(`el-icon-${key}`, component);\n\t}\n\n\t/** Element Plus 组件完整引入 */\n\tapp.use(ElementPlus);\n};\n"],"names":["ElDialog","props","draggable","type","Boolean","default","ElInput","showWordLimit","ElInputNumber","controls","ElTable","border","highlightCurrentRow","rowKey","String","Function","elMessageBox","message","options","title","cancelButtonText","confirmButtonText","closeOnClickModal","closeOnPressEscape","beforeClose","localBeforeClose","localConfirmButtonText","localShowCancelButton","showCancelButton","action","instance","done","show","confirmButtonLoading","cancelLoading","useOverlay","hide","newDone","execFunction","then","catch","error","errorHandler","ElMessageBox","Object","assign","boxType","alert","prompt","confirm","app","key","component","entries","ElementPlusIconsVue","use","ElementPlus"],"mappings":"0nBASAA,EAAAA,SAASC,MAAQ,IACbD,EAASA,SAAAC,MAKZC,UAAW,CACVC,KAAMC,QACNC,SAAS,IAIXC,EAAAA,QAAQL,MAAQ,IACZK,EAAQA,QAAAL,MAKXM,cAAe,CACdJ,KAAMC,QACNC,SAAS,IAIXG,EAAAA,cAAcP,MAAQ,IAClBO,EAAcA,cAAAP,MAKjBQ,SAAU,CACTN,KAAMC,QACNC,SAAS,IAIXK,EAAAA,QAAQT,MAAQ,IACZS,EAAQA,QAAAT,MAKXU,OAAQ,CACPR,KAAMC,QACNC,SAAS,GAMVO,oBAAqB,CACpBT,KAAMC,QACNC,SAAS,GAMVQ,OAAQ,CACPV,KAAM,CAACW,OAAQC,UACfV,QAAS,OAKX,MAAMW,EAAe,CACpBC,EACAC,EACAf,KA6BI,WA3BJe,EAAUA,GAAW,aACPC,SAEbD,EAAQC,MAAQ,QAES,OAAtB,MAAAD,OAAA,EAAAA,EAAShB,aAEZgB,EAAQhB,WAAY,UAEhBgB,WAASE,oBAEbF,EAAQE,iBAAmB,aAEvBF,WAASG,qBAEbH,EAAQG,kBAAoB,MAEK,OAA9B,MAAAH,OAAA,EAAAA,EAASI,qBAEZJ,EAAQI,mBAAoB,GAEM,OAA/B,MAAAJ,OAAA,EAAAA,EAASK,sBAEZL,EAAQK,oBAAqB,GAIF,OAAxB,MAAAL,OAAA,EAAAA,EAASM,aAA0B,CACtC,MAAMC,EAAmBP,EAAQM,YAC3BE,SAAyBR,WAASG,oBAAqB,KACvDM,SAAwBT,WAASU,oBAAoB,EAC3DV,EAAQM,YAAc,CAACK,EAAgBC,EAA2BC,KACjE,GAAe,YAAXF,EAAsB,cACdG,KAAK,GAChBF,EAASG,sBAAuB,EAChCH,EAASF,kBAAmB,EAC5BE,EAAST,kBAAoB,SAE7B,MAAMa,EAAgB,KACrBJ,EAASG,sBAAuB,EAChCH,EAASF,iBAAmBD,EAC5BG,EAAST,kBAAoBK,EAC7BS,EAAAA,WAAWC,MAAK,EAGXC,EAAU,cAKhBC,EAAAA,aAAab,EAAkBI,EAAQC,EAAUO,GAC/CE,MAAK,YAGLC,OAAOC,mBACM,aAAcA,OAE3BC,EAAAA,aAAaD,EAAK,GAClB,SAGH,CAEF,CAGA,OAAQtC,GACP,IAAK,QACJ,MACD,IAAK,UAKL,IAAK,SAC6B,OAA7B,MAAAe,OAAA,EAAAA,EAASU,oBACZV,EAAQU,kBAAmB,GAKvB,OAAAe,EAAAA,aACNC,OAAOC,OACN,CACC5B,WAEDC,EACA,CACC4B,QAAS3C,IAEX,EAIFwC,EAAAA,aAAaI,MAAQ,CAAC9B,EAAyCC,IAC9DF,EAAaC,EAASC,EAAS,SAEhCyB,EAAAA,aAAaK,OAAS,CAAC/B,EAAyCC,IAC/DF,EAAaC,EAASC,EAAS,UAEhCyB,EAAAA,aAAaM,QAAU,CAAChC,EAAyCC,IAChEF,EAAaC,EAASC,EAAS,sCAEGgC,IAElC,IAAA,MAAYC,EAAKC,KAAcR,OAAOS,QAAQC,GAE7CJ,EAAIE,UAAU,WAAWD,IAAOC,GAIjCF,EAAIK,IAAIC,EAAW"}