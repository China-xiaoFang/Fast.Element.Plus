{"version":3,"file":"element-plus.mjs","sources":["../../packages/element-plus.ts"],"sourcesContent":["/** Element Plus 组件全局配置 */\n\nimport type { App, PropType } from \"vue\";\nimport * as ElementPlusIconsVue from \"@element-plus/icons-vue\";\nimport { useOverlay } from \"@fast-element-plus/hooks\";\nimport { consoleError, errorHandler, execFunction } from \"@fast-element-plus/utils\";\nimport type { Action, ElMessageBoxOptions, MessageBoxData, MessageBoxState, TableProps } from \"element-plus\";\nimport ElementPlus, { ElDialog, ElInput, ElInputNumber, ElMessageBox, ElTable } from \"element-plus\";\n\nElDialog.props = {\n\t...ElDialog.props,\n\t/**\n\t * 默认拖拽\n\t * @description enable dragging feature for Dialog\n\t */\n\tdraggable: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n};\n\nElInput.props = {\n\t...ElInput.props,\n\t/**\n\t * 默认显示统计字数\n\t * @description word count\n\t */\n\tshowWordLimit: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n};\n\nElInputNumber.props = {\n\t...ElInputNumber.props,\n\t/**\n\t * 默认不使用控制按钮\n\t * @description whether to enable the control buttons\n\t */\n\tcontrols: {\n\t\ttype: Boolean,\n\t\tdefault: false,\n\t},\n};\n\nElTable.props = {\n\t...ElTable.props,\n\t/**\n\t * 默认显示边框\n\t * @description whether Table has vertical border\n\t */\n\tborder: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n\t/**\n\t * 默认高亮当前行\n\t * @description whether current row is highlighted\n\t */\n\thighlightCurrentRow: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n\t/**\n\t * 默认行Key为 \"id\"\n\t * @description key of row data, used for optimizing rendering. Required if `reserve-selection` is on or display tree data. When its type is String, multi-level access is supported, e.g. `user.info.id`, but `user.info[0].id` is not supported, in which case `Function` should be used\n\t */\n\trowKey: {\n\t\ttype: [String, Function] as PropType<TableProps<any>[\"rowKey\"]>,\n\t\tdefault: \"id\",\n\t},\n};\n\n// ElMessageBox 默认配置\nconst elMessageBox = (\n\tmessage: ElMessageBoxOptions[\"message\"],\n\toptions: ElMessageBoxOptions,\n\ttype: \"alert\" | \"confirm\" | \"prompt\"\n): Promise<MessageBoxData> => {\n\toptions = options ?? {};\n\tif (!options?.title) {\n\t\t// 默认提示\n\t\toptions.title = \"温馨提示\";\n\t}\n\tif (options?.draggable == undefined) {\n\t\t// 默认拖拽\n\t\toptions.draggable = true;\n\t}\n\tif (!options?.cancelButtonText) {\n\t\t// 默认 取消按钮的文本内容\n\t\toptions.cancelButtonText = \"取消\";\n\t}\n\tif (!options?.confirmButtonText) {\n\t\t// 默认 确定按钮的文本内容\n\t\toptions.confirmButtonText = \"确定\";\n\t}\n\tif (options?.closeOnClickModal == undefined) {\n\t\t// 默认 是否可通过点击遮罩层关闭 MessageBox\n\t\toptions.closeOnClickModal = false;\n\t}\n\tif (options?.closeOnPressEscape == undefined) {\n\t\t// 默认 是否可通过按下 ESC 键关闭 MessageBox\n\t\toptions.closeOnPressEscape = false;\n\t}\n\n\t// 关闭之前的判断逻辑\n\tif (options?.beforeClose != undefined) {\n\t\tconst localBeforeClose = options.beforeClose;\n\t\tconst localConfirmButtonText = options?.confirmButtonText ?? \"确定\";\n\t\tconst localShowCancelButton = options?.showCancelButton ?? false;\n\t\toptions.beforeClose = (action: Action, instance: MessageBoxState, done: () => void): void => {\n\t\t\tif (action === \"confirm\") {\n\t\t\t\tuseOverlay.show(0);\n\t\t\t\tinstance.confirmButtonLoading = true;\n\t\t\t\tinstance.showCancelButton = false;\n\t\t\t\tinstance.confirmButtonText = \"加载中...\";\n\n\t\t\t\tconst cancelLoading = (): void => {\n\t\t\t\t\tinstance.confirmButtonLoading = false;\n\t\t\t\t\tinstance.showCancelButton = localShowCancelButton;\n\t\t\t\t\tinstance.confirmButtonText = localConfirmButtonText;\n\t\t\t\t\tuseOverlay.hide();\n\t\t\t\t};\n\n\t\t\t\tconst newDone = (): void => {\n\t\t\t\t\tcancelLoading();\n\t\t\t\t\tdone();\n\t\t\t\t};\n\n\t\t\t\texecFunction(localBeforeClose, action, instance, newDone)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tnewDone();\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tconsoleError(\"MessageBox\", error);\n\t\t\t\t\t\tcancelLoading();\n\t\t\t\t\t\terrorHandler(error);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t}\n\n\t// 根据类型有一些判断\n\tswitch (type) {\n\t\tcase \"alert\":\n\t\t\tbreak;\n\t\tcase \"confirm\":\n\t\t\tif (options?.showCancelButton == undefined) {\n\t\t\t\toptions.showCancelButton = true;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"prompt\":\n\t\t\tif (options?.showCancelButton == undefined) {\n\t\t\t\toptions.showCancelButton = true;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn ElMessageBox(\n\t\tObject.assign(\n\t\t\t{\n\t\t\t\tmessage,\n\t\t\t},\n\t\t\toptions,\n\t\t\t{\n\t\t\t\tboxType: type,\n\t\t\t}\n\t\t)\n\t);\n};\n\nElMessageBox.alert = (message: ElMessageBoxOptions[\"message\"], options?: ElMessageBoxOptions): Promise<MessageBoxData> =>\n\telMessageBox(message, options, \"alert\");\n\nElMessageBox.prompt = (message: ElMessageBoxOptions[\"message\"], options?: ElMessageBoxOptions): Promise<MessageBoxData> =>\n\telMessageBox(message, options, \"prompt\");\n\nElMessageBox.confirm = (message: ElMessageBoxOptions[\"message\"], options?: ElMessageBoxOptions): Promise<MessageBoxData> =>\n\telMessageBox(message, options, \"confirm\");\n\nexport const installElementPlus = (app: App): void => {\n\t/** 注册所有 Element Plus Icon */\n\tfor (const [key, component] of Object.entries(ElementPlusIconsVue)) {\n\t\t// 这里是给 FaIcon 使用的\n\t\tapp.component(`el-icon-${key}`, component);\n\t}\n\n\t/** Element Plus 组件完整引入 */\n\tapp.use(ElementPlus);\n};\n"],"names":[],"mappings":"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"}