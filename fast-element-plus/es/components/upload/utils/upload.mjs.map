{"version":3,"file":"upload.mjs","sources":["../../../../../packages/components/upload/utils/upload.ts"],"sourcesContent":["import { ElMessage } from \"element-plus\";\nimport { FaMimeType } from \"@fast-element-plus/constants\";\nimport { consoleError, consoleWarn } from \"@fast-china/utils\";\nimport { isArray, isFunction } from \"lodash-unified\";\nimport type { UploadRawFile } from \"element-plus\";\n\nconst FaMimeTypeNames: Record<string, keyof typeof FaMimeType> = {};\n\nfor (const [kName, vAccept] of Object.entries(FaMimeType)) {\n\tvAccept.split(\",\").forEach((tItem) => {\n\t\tFaMimeTypeNames[tItem.trim()] = kName as keyof typeof FaMimeType;\n\t});\n}\n\n/**\n * 上传工具类\n */\nexport const uploadUtil = {\n\t/**\n\t * 识别文件类型\n\t */\n\tdetectFileType(accept: string): string {\n\t\tconst detectTypes = new Set<string>();\n\t\taccept.split(\",\").forEach((mimeType) => {\n\t\t\tdetectTypes.add(FaMimeTypeNames[mimeType] ?? mimeType);\n\t\t});\n\t\treturn Array.from(detectTypes).join(\",\");\n\t},\n\t/**\n\t * 获取props data属性值\n\t */\n\tgetPropsData(rawFile: UploadRawFile, data: any | any[] | ((rawFile: UploadRawFile) => any[])): any {\n\t\tlet propsData;\n\t\tif (isFunction(data)) {\n\t\t\tpropsData = data(rawFile);\n\t\t} else {\n\t\t\tpropsData = data;\n\t\t}\n\n\t\tconst result = {};\n\t\tif (isArray(data)) {\n\t\t\tdata.forEach((item) => {\n\t\t\t\tObject.assign(result, item);\n\t\t\t});\n\t\t} else {\n\t\t\tObject.assign(result, propsData);\n\t\t}\n\n\t\treturn result;\n\t},\n\t/**\n\t * 文件上传\n\t * @param url 地址\n\t * @param file 文件\n\t * @param fileName 文件名称\n\t * @param params 参数\n\t */\n\tasync uploadFile(url: string, file: File, fileName: string, params?: unknown): Promise<string> {\n\t\tif (!url) {\n\t\t\tconsoleError(\"uploadUtil\", \"文件上传地址为空！\");\n\t\t\tElMessage.error(\"文件上传地址为空！\");\n\t\t\treturn Promise.reject();\n\t\t}\n\t\tconst formData = new FormData();\n\t\tformData.append(\"file\", file);\n\t\tformData.append(\"fileName\", fileName);\n\t\tif (params) {\n\t\t\tObject.keys(params).forEach((key) => {\n\t\t\t\tformData.append(key, params[key]);\n\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"multipart/form-data\",\n\t\t\t\t},\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: formData,\n\t\t\t});\n\t\t\tif (!response.ok) {\n\t\t\t\tconsoleWarn(\"uploadUtil\", \"文件上传失败！\");\n\t\t\t\tElMessage.error(\"文件上传失败！\");\n\t\t\t\treturn Promise.reject();\n\t\t\t}\n\t\t\treturn await response.text();\n\t\t} catch (error) {\n\t\t\tconsoleWarn(\"uploadUtil\", \"文件上传失败！\");\n\t\t\tconsoleError(\"uploadUtil\", error);\n\t\t\tElMessage.error(\"文件上传失败！\");\n\t\t\treturn Promise.reject();\n\t\t}\n\t},\n\t/**\n\t * 文件上传\n\t * @param url 地址\n\t * @param file 文件\n\t * @param fileName 文件名称\n\t * @param params 参数\n\t */\n\tasync uploadFileByApi(api: (formData: FormData) => Promise<string>, file: File, fileName: string, params?: unknown): Promise<string> {\n\t\tif (!api) {\n\t\t\tconsoleError(\"uploadUtil\", \"文件上传接口为空！\");\n\t\t\tElMessage.error(\"文件上传接口为空！\");\n\t\t\treturn Promise.reject();\n\t\t}\n\t\tconst formData = new FormData();\n\t\tformData.append(\"file\", file);\n\t\tformData.append(\"fileName\", fileName);\n\t\tif (params) {\n\t\t\tObject.keys(params).forEach((key) => {\n\t\t\t\tformData.append(key, params[key]);\n\t\t\t});\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve<string>(await api(formData));\n\t\t} catch (error) {\n\t\t\tconsoleWarn(\"uploadUtil\", \"文件上传失败！\");\n\t\t\tconsoleError(\"uploadUtil\", error);\n\t\t\tElMessage.error(\"文件上传失败！\");\n\t\t\treturn Promise.reject();\n\t\t}\n\t},\n};\n"],"names":[],"mappings":"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"}