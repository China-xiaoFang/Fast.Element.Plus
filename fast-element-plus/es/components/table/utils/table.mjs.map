{"version":3,"file":"table.mjs","sources":["../../../../../packages/components/table/utils/table.ts"],"sourcesContent":["import { isArray, isFunction, isString } from \"lodash-unified\";\nimport type { FaTableColumnCtx, FaTableEnumColumnCtx, FaTableEnumColumnType, PagedSortInput } from \"@fast-element-plus/components\";\n\n/**\n * 表格工具类\n */\nexport const tableUtil = {\n\t/**\n\t * @description 处理无数据情况\n\t * @param {String} callValue 需要处理的值\n\t */\n\tformatValue(callValue: any): any {\n\t\t// 如果当前值为数组,使用 / 拼接（根据需求自定义）\n\t\t// if (isArray(callValue)) return callValue.length ? callValue.join(\" / \") : \"--\";\n\t\tif (isArray(callValue)) return callValue.length ? callValue.join(` , `) : null;\n\t\t// return callValue ?? \"--\";\n\t\treturn callValue;\n\t},\n\t/**\n\t * @description 处理 prop 为多级嵌套的情况(列如: prop:user.name)\n\t * @param {Object} row 当前行数据\n\t * @param {String} prop 当前 prop\n\t */\n\thandleRowAccordingToProp(row: any, prop: string): any {\n\t\t// if (!prop.includes(\".\")) return row[prop] ?? \"--\";\n\t\tif (!prop.includes(\".\")) return row[prop] ?? null;\n\t\t// prop.split(\".\").forEach((item) => (row = row[item] ?? \"--\"));\n\t\tprop.split(\".\").forEach((item) => (row = row[item]));\n\t\treturn row;\n\t},\n\t/**\n\t * @description 处理 prop，当 prop 为多级嵌套时 ==> 返回最后一级 prop\n\t * @param {String} prop 当前 prop\n\t */\n\thandleProp(prop: string): string {\n\t\tconst propArr = prop.split(\".\");\n\t\tif (propArr.length === 1) return prop;\n\t\treturn propArr[propArr.length - 1];\n\t},\n\t/**\n\t * @description 根据枚举列表查询当需要的数据（如果指定了 label 和 value 的 key值，会自动识别格式化）\n\t * @param {String} callValue 当前单元格值\n\t * @param {Array} enumData 字典列表\n\t * @param {Array} fieldNames 指定 label && value 的 key 值\n\t * @param {String} type 过滤类型（目前只有 tag）\n\t */\n\tfilterEnum(callValue: any, enumData: FaTableEnumColumnCtx[], fieldNames?: { label: string; value: string }, type?: \"tag\"): string {\n\t\tconst value = fieldNames?.value ?? \"value\";\n\t\tconst label = fieldNames?.label ?? \"label\";\n\t\tlet filterData: any = {};\n\t\tif (isArray(enumData)) {\n\t\t\tfilterData = enumData.find((item: any) => item[value] === callValue);\n\t\t}\n\t\tif (type === \"tag\") {\n\t\t\treturn filterData?.type ?? \"primary\";\n\t\t}\n\t\t// return filterData ? filterData[label] : \"--\";\n\t\treturn filterData ? filterData[label] : null;\n\t},\n\t/**\n\t * 数组动态排序\n\t */\n\tarrayDynamicSort(sortList: PagedSortInput[]): (a: any, b: any) => number {\n\t\treturn function (a: any, b: any) {\n\t\t\tif (sortList && sortList.length > 0) {\n\t\t\t\tfor (const condition of sortList) {\n\t\t\t\t\tconst property = condition.enField;\n\t\t\t\t\tconst order = condition.mode;\n\n\t\t\t\t\tconst aValue = a[property];\n\t\t\t\t\tconst bValue = b[property];\n\n\t\t\t\t\tif (typeof aValue === \"string\" && typeof bValue === \"string\") {\n\t\t\t\t\t\tif (order === \"ascending\") {\n\t\t\t\t\t\t\tconst comparison = aValue.localeCompare(bValue, \"zh-CN\");\n\t\t\t\t\t\t\tif (comparison !== 0) {\n\t\t\t\t\t\t\t\treturn comparison;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (order === \"descending\") {\n\t\t\t\t\t\t\tconst comparison = bValue.localeCompare(aValue, \"zh-CN\");\n\t\t\t\t\t\t\tif (comparison !== 0) {\n\t\t\t\t\t\t\t\treturn comparison;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (order === \"ascending\") {\n\t\t\t\t\t\t\tif (aValue < bValue) return -1;\n\t\t\t\t\t\t\tif (aValue > bValue) return 1;\n\t\t\t\t\t\t} else if (order === \"descending\") {\n\t\t\t\t\t\t\tif (aValue > bValue) return -1;\n\t\t\t\t\t\t\tif (aValue < bValue) return 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t};\n\t},\n\t/**\n\t * 设置枚举\n\t */\n\tsetEnumMap(columnEnum: FaTableEnumColumnType, prop: string, enumMap: Map<string, FaTableEnumColumnCtx[]>): void {\n\t\tif (!columnEnum) return;\n\t\tif (isFunction(columnEnum)) {\n\t\t\tcolumnEnum().then((res) => {\n\t\t\t\tenumMap.set(prop, res);\n\t\t\t});\n\t\t} else if (isArray(columnEnum)) {\n\t\t\tenumMap.set(prop, columnEnum);\n\t\t}\n\t},\n\t/**\n\t * 扁平化 columns\n\t */\n\tflatColumns(columns: FaTableColumnCtx[], enumMap?: Map<string, FaTableEnumColumnCtx[]>): FaTableColumnCtx[] {\n\t\tconst flatArr: FaTableColumnCtx[] = [];\n\t\tcolumns.forEach((col) => {\n\t\t\tif (col._children?.length) {\n\t\t\t\tflatArr.push(...this.flatColumns(col._children));\n\t\t\t}\n\n\t\t\tflatArr.push(col);\n\n\t\t\t// 给每一项 column 添加 show && filterEnum 默认属性\n\t\t\tcol.show = col.show ?? true;\n\t\t\t// col.filterEnum = col.filterEnum ?? col.tag ?? false;\n\n\t\t\tlet enumKey = col.prop ?? col.search?.key;\n\n\t\t\tif (col.enum && isString(col.enum)) {\n\t\t\t\tenumKey = col.enum;\n\t\t\t}\n\n\t\t\t// 设置 enumMap\n\t\t\tthis.setEnumMap(col.enum, enumKey, enumMap);\n\t\t});\n\t\treturn flatArr.filter((item) => !item._children?.length);\n\t},\n};\n"],"names":[],"mappings":"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"}