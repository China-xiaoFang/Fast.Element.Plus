{"version":3,"file":"axios.mjs","sources":["../../../packages/utils/axios.ts"],"sourcesContent":["import { FastApp } from \"@fast-element-plus/settings\";\nimport { Local, consoleDebug, consoleError, consoleLog, consoleWarn } from \"@fast-element-plus/utils\";\nimport type { AxiosError, AxiosRequestConfig, AxiosResponse, InternalAxiosRequestConfig } from \"axios\";\nimport axios from \"axios\";\nimport { ElLoading, ElMessage, ElMessageBox, type LoadingOptions } from \"element-plus\";\nimport { isObject, isString } from \"lodash-unified\";\nimport { cryptoUtil } from \"./crypto\";\n\n/**\n * RESTful风格Api响应\n */\nexport type ApiResponse<Input = any, Output = any> = {\n\t/**\n\t * 执行成功\n\t */\n\tsuccess?: boolean;\n\t/**\n\t * 状态码\n\t */\n\tcode?: number;\n\t/**\n\t * 错误信息\n\t */\n\tmessage?: string;\n\t/**\n\t * 数据\n\t */\n\tdata?: Output;\n\t/**\n\t * 时间戳\n\t */\n\ttimestamp?: number;\n\t/**\n\t * 响应\n\t */\n\tresponse?: AxiosResponse<Output, Input>;\n};\n\n/**\n * RESTful风格Api Promise\n */\nexport type ApiPromise<Input = any, Output = any> = Promise<ApiResponse<Input, Output>>;\n\n/**\n * Axios 选项\n */\nexport type AxiosOptions = {\n\t/**\n\t * 是否开启取消重复请求, 默认为\n\t * @default true\n\t */\n\tcancelDuplicateRequest?: boolean;\n\t/**\n\t * 是否开启loading层效果\n\t * @default false\n\t */\n\tloading?: boolean;\n\t/**\n\t * 是否开启缓存，只有Get请求才行\n\t * @default false\n\t */\n\tcache?: boolean;\n\t/**\n\t * 忽略错误\n\t * @default false\n\t */\n\tignoreError?: boolean;\n\t/**\n\t * Get请求缓存问题处理\n\t * @default true\n\t */\n\tgetMethodCacheHandle?: boolean;\n\t/**\n\t * 是否开启简洁的数据结构响应\n\t * - 只有响应格式是JSON的才开启\n\t * @default true\n\t */\n\tsimpleDataFormat?: boolean;\n\t/**\n\t * 是否开启接口错误信息展示\n\t * @default true\n\t */\n\tshowErrorMessage?: boolean;\n\t/**\n\t * 是否开启code信息提示\n\t * - code >= 200 && code <= 299 则不提示\n\t * @default true\n\t */\n\tshowCodeMessage?: boolean;\n\t/**\n\t * 是否开启请求成功的信息提示\n\t * - 只有 code >= 200 && code <= 299 才提示\n\t * @default false\n\t */\n\tshowSuccessMessage?: boolean;\n\t/**\n\t * 是否开启自动下载文件\n\t * - 只有 responseType 配置了 \"blob\" 才会自动下载\n\t * @default true\n\t */\n\tautoDownloadFile?: boolean;\n};\n\ntype FastAxiosRequestConfig<Input> = AxiosRequestConfig<Input> & AxiosOptions;\n\n/**\n * Http 缓存 Key\n */\nexport const HTTP_CACHE_KEY = \"HTTP_CACHE_\";\n\nconst axiosOptions: AxiosOptions = {\n\tcancelDuplicateRequest: true,\n\tloading: false,\n\tcache: false,\n\tignoreError: false,\n\tgetMethodCacheHandle: true,\n\tsimpleDataFormat: true,\n\tshowErrorMessage: true,\n\tshowCodeMessage: true,\n\tshowSuccessMessage: false,\n\tautoDownloadFile: true,\n};\n\nconst loadingOptions: LoadingOptions = {\n\tfullscreen: true,\n\tlock: true,\n\ttext: \"加载中...\",\n\tbackground: \"rgba(0, 0, 0, 0.7)\",\n};\n\nconst errorCodeMessages = {\n\tcancelDuplicate: \"重复请求，自动取消！\",\n\toffLine: \"您断网了！\",\n\tfileDownloadError: \"文件下载失败或此文件不存在！\",\n\t302: \"接口重定向了！\",\n\t400: \"参数不正确！\",\n\t401: \"您没有权限操作（令牌、用户名、密码错误）！\",\n\t403: \"您的访问是被禁止的！\",\n\t404: \"请求的资源不存在！\",\n\t405: \"请求的格式不正确！\",\n\t408: \"请求超时！\",\n\t409: \"系统已存在相同数据！\",\n\t410: \"请求的资源被永久删除，且不会再得到的！\",\n\t422: \"当创建一个对象时，发生一个验证错误！\",\n\t429: \"请求过于频繁，请稍后再试！\",\n\t500: \"服务器内部错误！\",\n\t501: \"服务未实现！\",\n\t502: \"网关错误！\",\n\t503: \"服务不可用，服务器暂时过载或维护！\",\n\t504: \"服务暂时无法访问，请稍后再试！\",\n\t505: \"HTTP版本不受支持！\",\n\tdefault: \"请求错误！\",\n\tERR_NETWORK: \"网关错误，服务不可用，服务器暂时过载或维护！\",\n};\n\nconst pendingMap = new Map();\n\n/**\n * 加载实例\n */\nconst loadingInstance = {\n\t// ElLoading 的实例信息\n\ttarget: null,\n\t// 总数\n\tcount: 0,\n};\n\n/**\n * 关闭Loading层实例\n */\nconst closeLoading = (options: AxiosOptions): void => {\n\tif (options.loading && loadingInstance.count > 0) loadingInstance.count--;\n\tif (loadingInstance.count === 0) {\n\t\tloadingInstance.target.close();\n\t\tloadingInstance.target = null;\n\t}\n};\n\n/**\n * 生成每个请求的唯一key\n */\nconst getPendingKey = (axiosConfig: AxiosRequestConfig): string => {\n\tlet { data } = axiosConfig;\n\tconst { url, method, params } = axiosConfig;\n\t// response里面返回的config.data是个字符串对象\n\tif (isString(data)) data = JSON.parse(data);\n\treturn [url, method, JSON.stringify(params), JSON.stringify(data)].join(\"&\");\n};\n\n/**\n * 储存每个请求的唯一cancel回调, 以此为标识\n */\nconst addPending = (pendingKey: string, axiosConfig: AxiosRequestConfig): void => {\n\taxiosConfig.cancelToken =\n\t\taxiosConfig.cancelToken ||\n\t\tnew axios.CancelToken((cancel) => {\n\t\t\tif (!pendingMap.has(pendingKey)) {\n\t\t\t\tpendingMap.set(pendingKey, cancel);\n\t\t\t}\n\t\t});\n};\n\n/**\n * 删除重复的请求\n */\nconst removePending = (pendingKey: string): void => {\n\tif (pendingMap.has(pendingKey)) {\n\t\tconst cancelToken = pendingMap.get(pendingKey);\n\t\tcancelToken(pendingKey);\n\t\tpendingMap.delete(pendingKey);\n\t}\n};\n\n/**\n * Http 错误状态码处理\n */\nconst httpErrorStatusHandle = (error: AxiosError | any): void => {\n\t// 判断请求是否被取消\n\tif (axios.isCancel(error)) {\n\t\treturn;\n\t}\n\tlet message = \"\";\n\t// 判断是否断网\n\tif (!window.navigator.onLine) {\n\t\tmessage = errorCodeMessages[\"offLine\"];\n\t} else {\n\t\t// 其他错误码处理\n\t\t// 尝试获取 Restful 风格返回Code，或者获取响应状态码\n\t\tconst code = error?.response?.data?.code || error?.response?.status || error?.code || \"default\";\n\t\t// 400业务异常\n\t\t// 500服务器内部错误，可能返回错误信息\n\t\tmessage = error?.response?.data?.message || errorCodeMessages[code];\n\t}\n\tElMessage.error(message);\n};\n\n/**\n * 获取错误信息\n */\nconst getPromiseReject = <Input = any, Output = any>(\n\toptions: FastAxiosRequestConfig<Input>,\n\tcode = 500,\n\tmessage?: string,\n\tdata?: any,\n\tresponse?: AxiosResponse<Output, Input>\n): Promise<any> => {\n\tif (options.simpleDataFormat) {\n\t\treturn Promise.resolve({\n\t\t\tsuccess: false,\n\t\t\tcode,\n\t\t\tmessage,\n\t\t\tdata,\n\t\t\ttimestamp: Date.now(),\n\t\t\tresponse,\n\t\t} as Output);\n\t} else {\n\t\treturn Promise.resolve(response);\n\t}\n};\n\n/**\n * 下载文件\n */\nconst downloadFile = (response: AxiosResponse): void => {\n\tconst blob = new Blob([response.data], { type: \"application/octet-stream;charset=UTF-8\" });\n\tconst contentDisposition = response.headers[\"content-disposition\"];\n\tconst pat = new RegExp(\"filename=([^;]+\\\\.[^\\\\.;]+);*\");\n\tconst result = pat.exec(contentDisposition);\n\tconst filename = result[1];\n\tconst downloadElement = document.createElement(\"a\");\n\tconst href = window.URL.createObjectURL(blob); // 创建下载的链接\n\tconst reg = /^[\"](.*)[\"]$/g;\n\tdownloadElement.style.display = \"none\";\n\tdownloadElement.href = href;\n\tdownloadElement.download = decodeURI(filename.replace(reg, \"$1\")); // 下载后文件名\n\tdocument.body.appendChild(downloadElement);\n\t// 点击下载\n\tdownloadElement.click();\n\t// 下载完成移除元素\n\tdocument.body.removeChild(downloadElement);\n\twindow.URL.revokeObjectURL(href);\n};\n\n/**\n * 创建 Axios\n * @param axiosConfig axios 请求配置\n * @param loading loading配置\n */\nconst createAxios = <Input = any, Output = any>(axiosConfig: FastAxiosRequestConfig<Input>, loading?: LoadingOptions): Promise<Output> => {\n\t// 合并选项\n\tconst options = { ...axiosOptions, ...axiosConfig };\n\n\t// 只有Get请求并且开启了简洁响应才可以进行缓存处理，且默认是不存在loading的\n\tif (options.cache && options.method.toUpperCase() === \"GET\" && options.simpleDataFormat) {\n\t\t// 如果启用缓存，则默认是不能携带参数的\n\t\tif (options.params) {\n\t\t\tconsoleWarn(\"axiosUtil\", \"如果使用 Http Cache，则不能存在任何 'params' 参数\");\n\t\t\treturn getPromiseReject<Input, Output>(\n\t\t\t\toptions,\n\t\t\t\t405,\n\t\t\t\t\"如果使用 Http Cache，则不能存在任何 'params' 参数\",\n\t\t\t\tnew Error(\"如果使用 Http Cache，则不能存在任何 'params' 参数\")\n\t\t\t);\n\t\t}\n\n\t\tconst cacheKey = `${HTTP_CACHE_KEY}${options.url}`;\n\t\tconst cacheRes = Local.get<Output>(cacheKey);\n\t\tif (cacheRes) {\n\t\t\treturn Promise.resolve(cacheRes);\n\t\t}\n\t} else {\n\t\t// 不满足上述条件，则默认不使用缓存\n\t\toptions.cache = false;\n\t}\n\n\t// 获取请求唯一 Key\n\tconst pendingKey = getPendingKey(axiosConfig);\n\n\tconst timestamp = Date.now();\n\n\t// 创建 Axios 请求\n\tconst Axios = axios.create({\n\t\tbaseURL: FastApp.state.axios.baseUrl,\n\t\ttimeout: FastApp.state.axios.timeout,\n\t\theaders: {\n\t\t\t\"Fast-DeviceID\": window.deviceId,\n\t\t\t// 配置请求来源，标识为PC端\n\t\t\t\"Fast-DeviceType\": \"Web\",\n\t\t},\n\t\tresponseType: \"json\",\n\t});\n\n\t/**\n\t * 请求拦截\n\t */\n\tAxios.interceptors.request.use(\n\t\t(config: InternalAxiosRequestConfig<Input>) => {\n\t\t\t// 删除重复请求\n\t\t\tremovePending(pendingKey);\n\n\t\t\t// 判断是否开启取消重复请求\n\t\t\toptions.cancelDuplicateRequest && addPending(pendingKey, config);\n\n\t\t\t// 自定义请求拦截器\n\t\t\tFastApp.state.axios.interceptors.request && FastApp.state.axios.interceptors.request(config);\n\n\t\t\t// 判断是否显示loading层\n\t\t\tif (options.loading) {\n\t\t\t\tloadingInstance.count++;\n\t\t\t\tif (loadingInstance.count === 1) {\n\t\t\t\t\t// 合并 Loading 配置\n\t\t\t\t\tloading = { ...loadingOptions, ...loading };\n\t\t\t\t\tloadingInstance.target = ElLoading.service(loading);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 请求参数加密\n\t\t\tif (FastApp.state.axios.requestCipher) {\n\t\t\t\tlet requestData = config.params || config.data;\n\t\t\t\tconst dataStr = JSON.stringify(requestData);\n\t\t\t\tif (dataStr != null && dataStr != \"\" && dataStr != \"{}\") {\n\t\t\t\t\tconsoleDebug(\"axiosUtil\", `HTTP request data(\"${config.url}\")`, requestData);\n\t\t\t\t\tconst decryptData = cryptoUtil.aes.encrypt(dataStr, `${timestamp}`, `FIV${timestamp}`);\n\t\t\t\t\t// 组装请求格式\n\t\t\t\t\trequestData = {\n\t\t\t\t\t\tdata: decryptData,\n\t\t\t\t\t\ttimestamp,\n\t\t\t\t\t};\n\t\t\t\t\tswitch (config.method.toUpperCase()) {\n\t\t\t\t\t\tcase \"GET\":\n\t\t\t\t\t\tcase \"DELETE\":\n\t\t\t\t\t\tcase \"HEAD\":\n\t\t\t\t\t\t\tconfig.params = requestData;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"POST\":\n\t\t\t\t\t\tcase \"PUT\":\n\t\t\t\t\t\tcase \"PATCH\":\n\t\t\t\t\t\t\tconfig.data = requestData;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"OPTIONS\":\n\t\t\t\t\t\tcase \"CONNECT\":\n\t\t\t\t\t\tcase \"TRACE\":\n\t\t\t\t\t\t\tthrow new Error(\"This request mode is not supported.\");\n\t\t\t\t\t}\n\t\t\t\t\t// 请求头部增加加密标识\n\t\t\t\t\tconfig.headers[\"Fast-Request-Encipher\"] = \"true\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Get请求缓存处理\n\t\t\t\tif (config.method.toUpperCase() === \"GET\") {\n\t\t\t\t\tconfig.params = config.params || {};\n\t\t\t\t\tconfig.params._ = timestamp;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn config;\n\t\t},\n\t\t(error) => {\n\t\t\treturn getPromiseReject<Input, Output>(options, 500, \"应用程序内部错误！\", error);\n\t\t}\n\t);\n\n\t/**\n\t * 响应拦截\n\t */\n\tAxios.interceptors.response.use(\n\t\t(response: AxiosResponse<Output, Input>) => {\n\t\t\t// 删除重复请求\n\t\t\tremovePending(pendingKey);\n\n\t\t\t// 关闭loading层\n\t\t\toptions.loading && closeLoading(options);\n\n\t\t\t// 判断是否忽略错误\n\t\t\tif (options.ignoreError) {\n\t\t\t\treturn Promise.resolve(response);\n\t\t\t}\n\n\t\t\t// 自定义响应拦截器\n\t\t\tif (FastApp.state.axios.interceptors.response) {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = FastApp.state.axios.interceptors.response(response);\n\t\t\t\t\tif (result != null && result != undefined) {\n\t\t\t\t\t\treturn Promise.resolve(result);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// 判断是否忽略错误\n\t\t\t\t\tif (options.ignoreError) {\n\t\t\t\t\t\treturn Promise.resolve(response);\n\t\t\t\t\t}\n\t\t\t\t\treturn getPromiseReject<Input, Output>(options, 500, \"应用程序内部错误！\", error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tswitch (response.config.responseType) {\n\t\t\t\t// 配置了blob，不处理直接返回文件流\n\t\t\t\tcase \"blob\":\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t// 判断是否自动下载\n\t\t\t\t\t\tif (options.autoDownloadFile) {\n\t\t\t\t\t\t\tdownloadFile(response);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 这里直接返回\n\t\t\t\t\t\treturn Promise.resolve(response);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tElMessage.error(errorCodeMessages[\"fileDownloadError\"]);\n\t\t\t\t\t\treturn Promise.reject(response);\n\t\t\t\t\t}\n\t\t\t\t// 正常 JSON 格式响应处理\n\t\t\t\tcase \"json\":\n\t\t\t\t\t{\n\t\t\t\t\t\tconst responseData = response.data;\n\t\t\t\t\t\tconst restfulData = response.data as ApiResponse<Input, Output>;\n\t\t\t\t\t\tconst code: number = restfulData?.code ?? response.status;\n\t\t\t\t\t\tif (code < 200 || code > 299 || !restfulData?.success) {\n\t\t\t\t\t\t\t// 判断是否显示错误消息\n\t\t\t\t\t\t\tif (options.showCodeMessage) {\n\t\t\t\t\t\t\t\t// 判断返回的 message 是否为对象类型\n\t\t\t\t\t\t\t\tif (restfulData?.message) {\n\t\t\t\t\t\t\t\t\tif (isObject(restfulData?.message)) {\n\t\t\t\t\t\t\t\t\t\tElMessage.error(JSON.stringify(restfulData?.message));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tElMessage.error(restfulData?.message);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn getPromiseReject<Input, Output>(\n\t\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\t\tresponseData[\"message\"] ?? \"服务器内部错误！\",\n\t\t\t\t\t\t\t\t\trestfulData?.data ?? responseData,\n\t\t\t\t\t\t\t\t\tresponse\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// 请求响应解密\n\t\t\t\t\t\t\tif (FastApp.state.axios.requestCipher) {\n\t\t\t\t\t\t\t\tif (restfulData?.data) {\n\t\t\t\t\t\t\t\t\trestfulData.data = cryptoUtil.aes.decrypt<Output>(\n\t\t\t\t\t\t\t\t\t\trestfulData.data as string,\n\t\t\t\t\t\t\t\t\t\t`${restfulData.timestamp}`,\n\t\t\t\t\t\t\t\t\t\t`FIV${restfulData.timestamp}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t// 处理 \"\"xxx\"\" 这种数据\n\t\t\t\t\t\t\t\t\tif (isString(restfulData.data) && restfulData.data.startsWith('\"') && restfulData.data.endsWith('\"')) {\n\t\t\t\t\t\t\t\t\t\trestfulData.data = restfulData.data.replace(/\"/g, \"\") as Output;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconsoleDebug(\"axiosUtil\", `HTTP response data(\"${response.config.url}\")`, restfulData.data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// 判断是否缓存\n\t\t\t\t\t\t\tif (options.cache) {\n\t\t\t\t\t\t\t\tconst cacheKey = `${HTTP_CACHE_KEY}${options.url}`;\n\t\t\t\t\t\t\t\t// 默认缓存24小时\n\t\t\t\t\t\t\t\tLocal.set(cacheKey, restfulData?.data ?? responseData, 60 * 24);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (options.simpleDataFormat) {\n\t\t\t\t\t\t\t\treturn Promise.resolve({ ...(restfulData?.data ?? responseData), response });\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Promise.resolve(response);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (options.simpleDataFormat) {\n\t\t\t\t\t\treturn Promise.resolve({ ...response.data, response });\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Promise.resolve(response);\n\t\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t(error: AxiosError | any) => {\n\t\t\t// 删除重复请求标识\n\t\t\terror?.config && removePending(error?.config);\n\t\t\t// 关闭loading层\n\t\t\toptions.loading && closeLoading(options);\n\t\t\t// 判断请求是否被取消\n\t\t\tif (!axios.isCancel(error)) {\n\t\t\t\tconsoleError(\"axiosUtil\", errorCodeMessages[\"cancelDuplicate\"], error);\n\t\t\t}\n\n\t\t\t// 自定义响应错误\n\t\t\tif (FastApp.state.axios.interceptors.responseError) {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = FastApp.state.axios.interceptors.responseError(error);\n\t\t\t\t\tif (result != null && result != undefined) {\n\t\t\t\t\t\treturn Promise.reject(result);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn getPromiseReject<Input, Output>(options, 500, \"应用程序内部错误！\", error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 处理错误状态码\n\t\t\toptions.showErrorMessage && httpErrorStatusHandle(error);\n\n\t\t\t// 错误继续返回给到具体页面\n\t\t\treturn getPromiseReject<Input, Output>(options, 500, \"服务器内部错误！\", error);\n\t\t}\n\t);\n};\n\n/**\n * 是否存在版本更新实例\n */\nlet existsVersionUpdateInstance = false;\n\n/**\n * 检测版本更新\n */\nconst versionUpdate = (version: string): void => {\n\tconsoleLog(\"axiosUtil\", `当前版本 ${version}`);\n\n\taxios\n\t\t.get<{ version: string; dateTime: string }>(`/version.json?_=${Date.now()}`)\n\t\t.then((response) => {\n\t\t\tif (version !== response.data.version) {\n\t\t\t\t// 判断是否存在版本更新实例弹窗\n\t\t\t\tif (existsVersionUpdateInstance) return;\n\t\t\t\texistsVersionUpdateInstance = true;\n\t\t\t\tconsoleLog(\"axiosUtil\", `发现新版本 ${response.data.version}`);\n\t\t\t\tElMessageBox.confirm(`发现新版本 ${response.data.version}，是否立即更新？`, {\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tconfirmButtonText: \"更新\",\n\t\t\t\t\tcloseOnClickModal: false,\n\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tconsoleLog(\"axiosUtil\", `更新版本 ${response.data.version}`);\n\t\t\t\t\t\t// 强制刷新浏览器\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\texistsVersionUpdateInstance = false;\n\t\t\t\t\t\tconsoleWarn(\"axiosUtil\", `取消更新版本 ${response.data.version}`);\n\t\t\t\t\t\tElMessage.warning({\n\t\t\t\t\t\t\tmessage: \"您取消了更新，将在十分钟后再次进行提示！\",\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\t.then((error) => {\n\t\t\tconsoleError(\"axiosUtil\", \"检测版本更新错误。\", error);\n\t\t});\n};\n\n/**\n * 检测版本更新\n * @default 默认10分钟一次\n */\nconst checkVersionUpdate = (version: string, delay = 10 * 60 * 1000): void => {\n\tversionUpdate(version);\n\tsetInterval(() => {\n\t\tversionUpdate(version);\n\t}, delay);\n};\n\nexport const axiosUtil = {\n\t/**\n\t * 请求\n\t * @param axiosConfig axios 请求配置\n\t * @param loading loading配置\n\t */\n\trequest: createAxios,\n\t/**\n\t * 下载文件\n\t */\n\tdownloadFile,\n\t/**\n\t * 删除HTTP 缓存数据\n\t */\n\tdeleteHttpCache: (): void => {\n\t\tLocal.removeByPrefix(HTTP_CACHE_KEY);\n\t},\n\t/**\n\t * 检测版本更新\n\t * @default 默认10分钟一次\n\t */\n\tcheckVersionUpdate,\n};\n"],"names":["error"],"mappings":"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"}