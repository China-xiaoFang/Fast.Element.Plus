{"version":3,"file":"click.mjs","sources":["../../../packages/utils/click.ts"],"sourcesContent":["let _debounceTimeout: ReturnType<typeof setTimeout> | null = null;\nlet _throttleRunning = false;\n\nexport const clickUtil = {\n\t/**\n\t * 防抖\n\t * @param fn - 执行函数\n\t * @param delay - 延时毫秒\n\t * @returns 返回一个新的防抖函数\n\t */\n\tdebounce<T extends any[]>(fn: (...args: T) => void, delay = 500): (...args: T) => void {\n\t\treturn (...args: T) => {\n\t\t\t// 如果已有定时器，清除它\n\t\t\tif (_debounceTimeout) {\n\t\t\t\tclearTimeout(_debounceTimeout);\n\t\t\t}\n\t\t\t// 设置新的定时器\n\t\t\t_debounceTimeout = setTimeout(() => {\n\t\t\t\tfn(...args); // 调用原函数\n\t\t\t}, delay);\n\t\t};\n\t},\n\t/**\n\t * 节流\n\t * @param fn - 执行函数\n\t * @param delay - 延时毫秒\n\t * @returns 返回一个新的节流函数\n\t */\n\tthrottle<T extends any[]>(fn: (...args: T) => void, delay = 500): (...args: T) => void {\n\t\treturn (...args: T) => {\n\t\t\t// 如果节流操作正在运行，直接返回\n\t\t\tif (_throttleRunning) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// 设置节流状态为运行\n\t\t\t_throttleRunning = true;\n\t\t\tfn(...args); // 调用原函数\n\t\t\t// 设置定时器以重置节流状态\n\t\t\tsetTimeout(() => {\n\t\t\t\t_throttleRunning = false;\n\t\t\t}, delay);\n\t\t};\n\t},\n};\n"],"names":[],"mappings":"AAAA,IAAI,mBAAyD;AAC7D,IAAI,mBAAmB;AAEhB,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxB,SAA0B,IAA0B,QAAQ,KAA2B;AACtF,WAAO,IAAI,SAAY;AAEtB,UAAI,kBAAkB;AACrB,qBAAa,gBAAgB;AAAA,MAC9B;AAEA,yBAAmB,WAAW,MAAM;AACnC,WAAG,GAAG,IAAI;AAAA,SACR,KAAK;AAAA,IAAA;AAAA,EAEV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAA0B,IAA0B,QAAQ,KAA2B;AACtF,WAAO,IAAI,SAAY;AAEtB,UAAI,kBAAkB;AACrB;AAAA,MACD;AAEmB,yBAAA;AACnB,SAAG,GAAG,IAAI;AAEV,iBAAW,MAAM;AACG,2BAAA;AAAA,SACjB,KAAK;AAAA,IAAA;AAAA,EAEV;AACD;"}