{"version":3,"file":"index.mjs","sources":["../../../../packages/directives/click-throttle/index.ts"],"sourcesContent":["/*\n  需求：防止按钮在短时间内被多次点击，使用节流函数限制规定时间内只能点击一次。\n\n  思路：\n    1、第一次点击，立即调用方法并禁用按钮，等延迟结束再次激活按钮\n    2、将需要触发的方法绑定在指令上\n\n  使用：给 Dom 加上 v-throttle 及回调函数即可\n  <button v-throttle=\"debounceClick\">节流提交</button>\n*/\nimport { withInstallDirective } from \"@fast-china/utils\";\nimport type { Directive, DirectiveBinding } from \"vue\";\n\ninterface ElType extends HTMLElement {\n\t__handleClick__: () => any;\n\tdisabled: boolean;\n}\n\nconst ThrottleDirective: Directive = {\n\tmounted(el: ElType, binding: DirectiveBinding) {\n\t\tif (typeof binding.value !== \"function\") {\n\t\t\tthrow \"callback must be a function\";\n\t\t}\n\t\tlet timer: NodeJS.Timeout | null = null;\n\t\tel.__handleClick__ = (): void => {\n\t\t\tif (timer) {\n\t\t\t\tclearTimeout(timer);\n\t\t\t}\n\t\t\tif (!el.disabled) {\n\t\t\t\tel.disabled = true;\n\t\t\t\tbinding.value();\n\t\t\t\ttimer = setTimeout(() => {\n\t\t\t\t\tel.disabled = false;\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t};\n\t\tel.addEventListener(\"click\", el.__handleClick__);\n\t},\n\tbeforeUnmount(el: ElType) {\n\t\tel.removeEventListener(\"click\", el.__handleClick__);\n\t},\n};\n\nexport const vThrottle = withInstallDirective(ThrottleDirective, \"throttle\");\nexport default vThrottle;\n"],"names":[],"mappings":";AAkBA,MAAM,oBAA+B;AAAA,EACpC,QAAQ,IAAY,SAA2B;AAC9C,QAAI,OAAO,QAAQ,UAAU,YAAY;AACxC,YAAM;AAAA,IACP;AACA,QAAI,QAA+B;AACnC,OAAG,kBAAkB,MAAY;AAChC,UAAI,OAAO;AACV,qBAAa,KAAK;AAAA,MACnB;AACA,UAAI,CAAC,GAAG,UAAU;AACjB,WAAG,WAAW;AACd,gBAAQ,MAAA;AACR,gBAAQ,WAAW,MAAM;AACxB,aAAG,WAAW;AAAA,QACf,GAAG,GAAI;AAAA,MACR;AAAA,IACD;AACA,OAAG,iBAAiB,SAAS,GAAG,eAAe;AAAA,EAChD;AAAA,EACA,cAAc,IAAY;AACzB,OAAG,oBAAoB,SAAS,GAAG,eAAe;AAAA,EACnD;AACD;AAEO,MAAM,YAAY,qBAAqB,mBAAmB,UAAU;"}